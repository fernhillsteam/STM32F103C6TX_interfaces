
Example3_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000420  08000420  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000420  08000420  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000420  08000420  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000420  08000420  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000428  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800042c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800042c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015f0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005a6  00000000  00000000  00021624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00021bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ada  00000000  00000000  00021f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f28  00000000  00000000  00035a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da76  00000000  00000000  0003793a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b53b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000594  00000000  00000000  000b5404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000408 	.word	0x08000408

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000408 	.word	0x08000408

080001d4 <main>:

void delay(void);
void keypad_init(void);
char keypad_kbhit(void);

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
    keypad_init();
 80001d8:	f000 f826 	bl	8000228 <keypad_init>

    // enable PA5 for green LED
    RCC->AHB1ENR |=  1;	            /* enable GPIOA clock */
 80001dc:	4b10      	ldr	r3, [pc, #64]	; (8000220 <main+0x4c>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0f      	ldr	r2, [pc, #60]	; (8000220 <main+0x4c>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER &= ~0xC0000C00;    /* clear pin mode */
 80001e8:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <main+0x50>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <main+0x50>)
 80001ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80001f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001f6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000400;    /* set pin output mode */
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <main+0x50>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a09      	ldr	r2, [pc, #36]	; (8000224 <main+0x50>)
 80001fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000202:	6013      	str	r3, [r2, #0]

    while(1) {
        if (keypad_kbhit() != 0)    /* if a key is pressed */
 8000204:	f000 f82a 	bl	800025c <keypad_kbhit>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d003      	beq.n	8000216 <main+0x42>
            GPIOA->BSRR = 0x00000020;   /* turn on green LED */
 800020e:	4b05      	ldr	r3, [pc, #20]	; (8000224 <main+0x50>)
 8000210:	2220      	movs	r2, #32
 8000212:	619a      	str	r2, [r3, #24]
 8000214:	e7f6      	b.n	8000204 <main+0x30>
        else
            GPIOA->BSRR = 0x00200000;   /* turn off green LED */
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <main+0x50>)
 8000218:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800021c:	619a      	str	r2, [r3, #24]
        if (keypad_kbhit() != 0)    /* if a key is pressed */
 800021e:	e7f1      	b.n	8000204 <main+0x30>
 8000220:	40023800 	.word	0x40023800
 8000224:	40020000 	.word	0x40020000

08000228 <keypad_init>:
}

/* this function initializes PC0-3 (column) and PC4-7 (row).
 * The column pins need to have the pull-up resistors enabled.
 */
void keypad_init(void) {
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |=  0x14;	        /* enable GPIOC clock */
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <keypad_init+0x2c>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a08      	ldr	r2, [pc, #32]	; (8000254 <keypad_init+0x2c>)
 8000232:	f043 0314 	orr.w	r3, r3, #20
 8000236:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOC->MODER &= ~0x0000FFFF;    /* clear pin mode to input */
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <keypad_init+0x30>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a06      	ldr	r2, [pc, #24]	; (8000258 <keypad_init+0x30>)
 800023e:	0c1b      	lsrs	r3, r3, #16
 8000240:	041b      	lsls	r3, r3, #16
 8000242:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR =   0x00000055;    /* enable pull up resistors for column pins */
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <keypad_init+0x30>)
 8000246:	2255      	movs	r2, #85	; 0x55
 8000248:	60da      	str	r2, [r3, #12]
}
 800024a:	bf00      	nop
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	40023800 	.word	0x40023800
 8000258:	40020800 	.word	0x40020800

0800025c <keypad_kbhit>:

/* This is a non-blocking function.
 * If a key is pressed, it returns 1. Otherwise, it returns a 0.
 */
char keypad_kbhit(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
    int col;

    GPIOC->MODER = 0x00005500;      /* make all row pins output */
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <keypad_kbhit+0x44>)
 8000264:	f44f 42aa 	mov.w	r2, #21760	; 0x5500
 8000268:	601a      	str	r2, [r3, #0]
    GPIOC->BSRR =  0x00F00000;      /* drive all row pins low */
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <keypad_kbhit+0x44>)
 800026c:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8000270:	619a      	str	r2, [r3, #24]
    delay();                        /* wait for signals to settle */
 8000272:	f000 f817 	bl	80002a4 <delay>
    col = GPIOC->IDR & 0x000F;      /* read all column pins */
 8000276:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <keypad_kbhit+0x44>)
 8000278:	691b      	ldr	r3, [r3, #16]
 800027a:	f003 030f 	and.w	r3, r3, #15
 800027e:	607b      	str	r3, [r7, #4]
    GPIOC->MODER &= ~0x0000FF00;    /* disable all row pins drive */
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <keypad_kbhit+0x44>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <keypad_kbhit+0x44>)
 8000286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800028a:	6013      	str	r3, [r2, #0]
    if (col == 0x000F)              /* if all columns are high */
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b0f      	cmp	r3, #15
 8000290:	d101      	bne.n	8000296 <keypad_kbhit+0x3a>
        return 0;                   /* no key pressed */
 8000292:	2300      	movs	r3, #0
 8000294:	e000      	b.n	8000298 <keypad_kbhit+0x3c>
    else
        return 1;                   /* a key is pressed */
 8000296:	2301      	movs	r3, #1
}
 8000298:	4618      	mov	r0, r3
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40020800 	.word	0x40020800

080002a4 <delay>:

/* make a small delay */
void delay(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 20; i++) ;
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e002      	b.n	80002b6 <delay+0x12>
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3301      	adds	r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b13      	cmp	r3, #19
 80002ba:	ddf9      	ble.n	80002b0 <delay+0xc>
}
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr

080002ca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <NMI_Handler+0x4>

080002d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <HardFault_Handler+0x4>

080002d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002da:	e7fe      	b.n	80002da <MemManage_Handler+0x4>

080002dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <BusFault_Handler+0x4>

080002e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <UsageFault_Handler+0x4>

080002e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr

08000312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000312:	b580      	push	{r7, lr}
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000316:	f000 f83f 	bl	8000398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <SystemInit+0x20>)
 8000326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800032a:	4a05      	ldr	r2, [pc, #20]	; (8000340 <SystemInit+0x20>)
 800032c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800037c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800034a:	490e      	ldr	r1, [pc, #56]	; (8000384 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800034c:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0b      	ldr	r2, [pc, #44]	; (800038c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000360:	4c0b      	ldr	r4, [pc, #44]	; (8000390 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800036e:	f7ff ffd7 	bl	8000320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000372:	f000 f825 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000376:	f7ff ff2d 	bl	80001d4 <main>
  bx  lr    
 800037a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800037c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000388:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 800038c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000390:	20000024 	.word	0x20000024

08000394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC_IRQHandler>
	...

08000398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <HAL_IncTick+0x20>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <HAL_IncTick+0x24>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <HAL_IncTick+0x24>)
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000020 	.word	0x20000020

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	; (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	; (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	; (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	; (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000420 	.word	0x08000420
 80003fc:	08000420 	.word	0x08000420
 8000400:	08000420 	.word	0x08000420
 8000404:	08000424 	.word	0x08000424

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
