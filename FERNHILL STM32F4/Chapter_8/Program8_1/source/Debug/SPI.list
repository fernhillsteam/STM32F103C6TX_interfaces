
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08000f30  08000f30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f80  08000f80  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08000f80  08000f80  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f80  08000f80  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f80  08000f80  00010f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f84  08000f84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08000f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  08000ff0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08000ff0  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ac3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000871  00000000  00000000  00022b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  000233d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d0  00000000  00000000  000235f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001498b  00000000  00000000  000237c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000277f  00000000  00000000  00038153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000819fb  00000000  00000000  0003a8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc2cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000aa4  00000000  00000000  000bc320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000f18 	.word	0x08000f18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08000f18 	.word	0x08000f18

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
void SPI1_init(void);
void SPI1_write(unsigned char data);
uint8_t SPI1_transfer(uint8_t d);

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
    char c;

    SPI1_init();
 8000286:	f000 f81d 	bl	80002c4 <SPI1_init>
    USART2_init();
 800028a:	f000 f893 	bl	80003b4 <USART2_init>
    UART2_SendString("welcome to SPI\r\n");
 800028e:	480b      	ldr	r0, [pc, #44]	; (80002bc <main+0x3c>)
 8000290:	f000 f8f0 	bl	8000474 <UART2_SendString>

    while(1)
    {
        for (c = 'A'; c <= 'Z'; c++)
 8000294:	2341      	movs	r3, #65	; 0x41
 8000296:	71fb      	strb	r3, [r7, #7]
 8000298:	e009      	b.n	80002ae <main+0x2e>
        {
            SPI1_write(c);      /* write the letter through SPI1 */
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f85f 	bl	8000360 <SPI1_write>
            delayMs(100);
 80002a2:	2064      	movs	r0, #100	; 0x64
 80002a4:	f000 f912 	bl	80004cc <delayMs>
        for (c = 'A'; c <= 'Z'; c++)
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	3301      	adds	r3, #1
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b5a      	cmp	r3, #90	; 0x5a
 80002b2:	d9f2      	bls.n	800029a <main+0x1a>
        }
        UART2_SendString("\r\n");
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <main+0x40>)
 80002b6:	f000 f8dd 	bl	8000474 <UART2_SendString>
        for (c = 'A'; c <= 'Z'; c++)
 80002ba:	e7eb      	b.n	8000294 <main+0x14>
 80002bc:	08000f30 	.word	0x08000f30
 80002c0:	08000f44 	.word	0x08000f44

080002c4 <SPI1_init>:
    }
}

/* enable SPI1 and associated GPIO pins */
void SPI1_init(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;              /* enable GPIOA clock */
 80002c8:	4b22      	ldr	r3, [pc, #136]	; (8000354 <SPI1_init+0x90>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a21      	ldr	r2, [pc, #132]	; (8000354 <SPI1_init+0x90>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= 0x1000;         /* enable SPI1 clock */
 80002d4:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <SPI1_init+0x90>)
 80002d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002d8:	4a1e      	ldr	r2, [pc, #120]	; (8000354 <SPI1_init+0x90>)
 80002da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002de:	6453      	str	r3, [r2, #68]	; 0x44

    /* PORTA 5, 7 for SPI1 MOSI and SCLK */
    GPIOA->MODER &= ~0x0000CC00;    /* clear pin mode */
 80002e0:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <SPI1_init+0x94>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a1c      	ldr	r2, [pc, #112]	; (8000358 <SPI1_init+0x94>)
 80002e6:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 80002ea:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00008800;    /* set pin alternate mode */
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <SPI1_init+0x94>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a19      	ldr	r2, [pc, #100]	; (8000358 <SPI1_init+0x94>)
 80002f2:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 80002f6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~0xF0F00000;   /* clear alt mode */
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <SPI1_init+0x94>)
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	4a16      	ldr	r2, [pc, #88]	; (8000358 <SPI1_init+0x94>)
 80002fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000302:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000306:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  0x50500000;   /* set alt mode SPI1 */
 8000308:	4b13      	ldr	r3, [pc, #76]	; (8000358 <SPI1_init+0x94>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a12      	ldr	r2, [pc, #72]	; (8000358 <SPI1_init+0x94>)
 800030e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000312:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000316:	6213      	str	r3, [r2, #32]

    /* PORTA4 as GPIO output for SPI slave select */
    GPIOA->MODER &= ~0x00000300;    /* clear pin mode */
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <SPI1_init+0x94>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <SPI1_init+0x94>)
 800031e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000322:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000100;    /* set pin output mode */
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <SPI1_init+0x94>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <SPI1_init+0x94>)
 800032a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800032e:	6013      	str	r3, [r2, #0]

    SPI1->CR1 = 0x31C;		   /* set the Baud rate, 8-bit data frame */
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <SPI1_init+0x98>)
 8000332:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8000336:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = 0;
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <SPI1_init+0x98>)
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]
    SPI1->CR1 |= 0x40;              /* enable SPI1 module */
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <SPI1_init+0x98>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a06      	ldr	r2, [pc, #24]	; (800035c <SPI1_init+0x98>)
 8000344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000348:	6013      	str	r3, [r2, #0]
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	40023800 	.word	0x40023800
 8000358:	40020000 	.word	0x40020000
 800035c:	40013000 	.word	0x40013000

08000360 <SPI1_write>:

/* This function enables slave select, writes one byte to SPI1,
   wait for transmission complete and deassert slave select. */
void SPI1_write(unsigned char data)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
    GPIOA->BSRR = 0x00100000;       /* assert slave select */
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <SPI1_write+0x4c>)
 800036c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000370:	619a      	str	r2, [r3, #24]
    while (!(SPI1->SR & 2)) {}      /* wait until Transfer buffer Empty */
 8000372:	bf00      	nop
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <SPI1_write+0x50>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	f003 0302 	and.w	r3, r3, #2
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <SPI1_write+0x14>
    SPI1->DR = data;                /* write data */
 8000380:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <SPI1_write+0x50>)
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	60d3      	str	r3, [r2, #12]
    while (SPI1->SR & 0x80) {}      /* wait for transmission done */
 8000386:	bf00      	nop
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <SPI1_write+0x50>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1f9      	bne.n	8000388 <SPI1_write+0x28>
    GPIOA->BSRR = 0x00000010;       /* deassert slave select */
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <SPI1_write+0x4c>)
 8000396:	2210      	movs	r2, #16
 8000398:	619a      	str	r2, [r3, #24]
    usart2_sendInt(data);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f87f 	bl	80004a0 <usart2_sendInt>
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40020000 	.word	0x40020000
 80003b0:	40013000 	.word	0x40013000

080003b4 <USART2_init>:
	while((SPI1->SR&(1<<0)) == 0);	/* wait until RXNE is set */
	return SPI1->DR;	/* return the received data */
}
/* initialize USART2 to transmit at 9600 Baud */
void USART2_init (void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;          /* Enable GPIOA clock */
 80003b8:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <USART2_init+0x84>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a1e      	ldr	r2, [pc, #120]	; (8000438 <USART2_init+0x84>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= 0x20000;    /* Enable USART2 clock */
 80003c4:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <USART2_init+0x84>)
 80003c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c8:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <USART2_init+0x84>)
 80003ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ce:	6413      	str	r3, [r2, #64]	; 0x40

    /* Configure PA2 for USART2_TX */
    GPIOA->AFR[0] |= 0x0700;
 80003d0:	4b1a      	ldr	r3, [pc, #104]	; (800043c <USART2_init+0x88>)
 80003d2:	6a1b      	ldr	r3, [r3, #32]
 80003d4:	4a19      	ldr	r2, [pc, #100]	; (800043c <USART2_init+0x88>)
 80003d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80003da:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= 0x7000;   /* alt7 for USART2 */
 80003dc:	4b17      	ldr	r3, [pc, #92]	; (800043c <USART2_init+0x88>)
 80003de:	6a1b      	ldr	r3, [r3, #32]
 80003e0:	4a16      	ldr	r2, [pc, #88]	; (800043c <USART2_init+0x88>)
 80003e2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80003e6:	6213      	str	r3, [r2, #32]
    GPIOA->MODER  |=  0x0080;
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <USART2_init+0x88>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a13      	ldr	r2, [pc, #76]	; (800043c <USART2_init+0x88>)
 80003ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER  |=  0x0020;   /* enable alternate function for PA2 */
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <USART2_init+0x88>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a10      	ldr	r2, [pc, #64]	; (800043c <USART2_init+0x88>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6013      	str	r3, [r2, #0]

    USART2->CR1 = 0x00;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <USART2_init+0x8c>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
    USART2->CR1 |= 0x2000;      // UE=1... EN USART
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <USART2_init+0x8c>)
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <USART2_init+0x8c>)
 800040c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000410:	60d3      	str	r3, [r2, #12]
    USART2->BRR = 0x0683;       /* 9600 baud @ 16 MHz */
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <USART2_init+0x8c>)
 8000414:	f240 6283 	movw	r2, #1667	; 0x683
 8000418:	609a      	str	r2, [r3, #8]
    USART2->CR1 = 0x000C;       /* enable Tx, Rx, 8-bit data */
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <USART2_init+0x8c>)
 800041c:	220c      	movs	r2, #12
 800041e:	60da      	str	r2, [r3, #12]
    USART2->CR2 = 0x0000;       /* 1 stop bit */
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <USART2_init+0x8c>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
    USART2->CR3 = 0x0000;       /* no flow control */
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <USART2_init+0x8c>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]

}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40023800 	.word	0x40023800
 800043c:	40020000 	.word	0x40020000
 8000440:	40004400 	.word	0x40004400

08000444 <USART2_write>:
/* Write a character to USART2 */
int USART2_write (int ch)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    while (!(USART2->SR & 0x0080)) {}   // wait until Tx buffer empty
 800044c:	bf00      	nop
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <USART2_write+0x2c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f9      	beq.n	800044e <USART2_write+0xa>
    USART2->DR = ch;
 800045a:	4a05      	ldr	r2, [pc, #20]	; (8000470 <USART2_write+0x2c>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6053      	str	r3, [r2, #4]
    return ch;
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40004400 	.word	0x40004400

08000474 <UART2_SendString>:
	while((USART2->SR & (1<<6)) == 0);  //wait until the TC flag is set
	//USART2->SR &= ~(1<<6);
	USART2->DR = c;
}
void UART2_SendString(char *string)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	while(*string) USART2_write(*string++);
 800047c:	e006      	b.n	800048c <UART2_SendString+0x18>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	1c5a      	adds	r2, r3, #1
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ffdc 	bl	8000444 <USART2_write>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1f4      	bne.n	800047e <UART2_SendString+0xa>
}
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <usart2_sendInt>:
void usart2_sendInt(unsigned int i)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	char str[10];
	sprintf(str,"%c ",i);
 80004a8:	f107 030c 	add.w	r3, r7, #12
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	4906      	ldr	r1, [pc, #24]	; (80004c8 <usart2_sendInt+0x28>)
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 f903 	bl	80006bc <siprintf>
	UART2_SendString(str);
 80004b6:	f107 030c 	add.w	r3, r7, #12
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ffda 	bl	8000474 <UART2_SendString>
}
 80004c0:	bf00      	nop
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	08000f48 	.word	0x08000f48

080004cc <delayMs>:

/* 16 MHz SYSCLK */
void delayMs(int n)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 80004d4:	e00d      	b.n	80004f2 <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	e002      	b.n	80004e2 <delayMs+0x16>
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3301      	adds	r3, #1
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	f640 427a 	movw	r2, #3194	; 0xc7a
 80004e8:	4293      	cmp	r3, r2
 80004ea:	ddf7      	ble.n	80004dc <delayMs+0x10>
    for (; n > 0; n--)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	dcee      	bgt.n	80004d6 <delayMs+0xa>
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800050a:	e7fe      	b.n	800050a <NMI_Handler+0x4>

0800050c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <HardFault_Handler+0x4>

08000512 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <MemManage_Handler+0x4>

08000518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <BusFault_Handler+0x4>

0800051e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <UsageFault_Handler+0x4>

08000524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000552:	f000 f875 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000564:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <_sbrk+0x5c>)
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <_sbrk+0x60>)
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d102      	bne.n	800057e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <_sbrk+0x64>)
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <_sbrk+0x68>)
 800057c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <_sbrk+0x64>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	429a      	cmp	r2, r3
 800058a:	d207      	bcs.n	800059c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800058c:	f000 f86c 	bl	8000668 <__errno>
 8000590:	4603      	mov	r3, r0
 8000592:	220c      	movs	r2, #12
 8000594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	e009      	b.n	80005b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <_sbrk+0x64>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <_sbrk+0x64>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <_sbrk+0x64>)
 80005ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20018000 	.word	0x20018000
 80005bc:	00000400 	.word	0x00000400
 80005c0:	20000084 	.word	0x20000084
 80005c4:	200000a8 	.word	0x200000a8

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <SystemInit+0x20>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <SystemInit+0x20>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000624 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005f2:	490e      	ldr	r1, [pc, #56]	; (800062c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f4:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000608:	4c0b      	ldr	r4, [pc, #44]	; (8000638 <LoopFillZerobss+0x26>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000616:	f7ff ffd7 	bl	80005c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800061a:	f000 f82b 	bl	8000674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061e:	f7ff fe2f 	bl	8000280 <main>
  bx  lr    
 8000622:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000624:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000630:	08000f88 	.word	0x08000f88
  ldr r2, =_sbss
 8000634:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000638:	200000a4 	.word	0x200000a4

0800063c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC_IRQHandler>
	...

08000640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_IncTick+0x20>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x24>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <HAL_IncTick+0x24>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000000 	.word	0x20000000
 8000664:	20000090 	.word	0x20000090

08000668 <__errno>:
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <__errno+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000004 	.word	0x20000004

08000674 <__libc_init_array>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	4d0d      	ldr	r5, [pc, #52]	; (80006ac <__libc_init_array+0x38>)
 8000678:	4c0d      	ldr	r4, [pc, #52]	; (80006b0 <__libc_init_array+0x3c>)
 800067a:	1b64      	subs	r4, r4, r5
 800067c:	10a4      	asrs	r4, r4, #2
 800067e:	2600      	movs	r6, #0
 8000680:	42a6      	cmp	r6, r4
 8000682:	d109      	bne.n	8000698 <__libc_init_array+0x24>
 8000684:	4d0b      	ldr	r5, [pc, #44]	; (80006b4 <__libc_init_array+0x40>)
 8000686:	4c0c      	ldr	r4, [pc, #48]	; (80006b8 <__libc_init_array+0x44>)
 8000688:	f000 fc46 	bl	8000f18 <_init>
 800068c:	1b64      	subs	r4, r4, r5
 800068e:	10a4      	asrs	r4, r4, #2
 8000690:	2600      	movs	r6, #0
 8000692:	42a6      	cmp	r6, r4
 8000694:	d105      	bne.n	80006a2 <__libc_init_array+0x2e>
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f855 3b04 	ldr.w	r3, [r5], #4
 800069c:	4798      	blx	r3
 800069e:	3601      	adds	r6, #1
 80006a0:	e7ee      	b.n	8000680 <__libc_init_array+0xc>
 80006a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a6:	4798      	blx	r3
 80006a8:	3601      	adds	r6, #1
 80006aa:	e7f2      	b.n	8000692 <__libc_init_array+0x1e>
 80006ac:	08000f80 	.word	0x08000f80
 80006b0:	08000f80 	.word	0x08000f80
 80006b4:	08000f80 	.word	0x08000f80
 80006b8:	08000f84 	.word	0x08000f84

080006bc <siprintf>:
 80006bc:	b40e      	push	{r1, r2, r3}
 80006be:	b500      	push	{lr}
 80006c0:	b09c      	sub	sp, #112	; 0x70
 80006c2:	ab1d      	add	r3, sp, #116	; 0x74
 80006c4:	9002      	str	r0, [sp, #8]
 80006c6:	9006      	str	r0, [sp, #24]
 80006c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <siprintf+0x38>)
 80006ce:	9107      	str	r1, [sp, #28]
 80006d0:	9104      	str	r1, [sp, #16]
 80006d2:	4909      	ldr	r1, [pc, #36]	; (80006f8 <siprintf+0x3c>)
 80006d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80006d8:	9105      	str	r1, [sp, #20]
 80006da:	6800      	ldr	r0, [r0, #0]
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	a902      	add	r1, sp, #8
 80006e0:	f000 f868 	bl	80007b4 <_svfiprintf_r>
 80006e4:	9b02      	ldr	r3, [sp, #8]
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	b01c      	add	sp, #112	; 0x70
 80006ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80006f0:	b003      	add	sp, #12
 80006f2:	4770      	bx	lr
 80006f4:	20000004 	.word	0x20000004
 80006f8:	ffff0208 	.word	0xffff0208

080006fc <__ssputs_r>:
 80006fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000700:	688e      	ldr	r6, [r1, #8]
 8000702:	429e      	cmp	r6, r3
 8000704:	4682      	mov	sl, r0
 8000706:	460c      	mov	r4, r1
 8000708:	4690      	mov	r8, r2
 800070a:	461f      	mov	r7, r3
 800070c:	d838      	bhi.n	8000780 <__ssputs_r+0x84>
 800070e:	898a      	ldrh	r2, [r1, #12]
 8000710:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000714:	d032      	beq.n	800077c <__ssputs_r+0x80>
 8000716:	6825      	ldr	r5, [r4, #0]
 8000718:	6909      	ldr	r1, [r1, #16]
 800071a:	eba5 0901 	sub.w	r9, r5, r1
 800071e:	6965      	ldr	r5, [r4, #20]
 8000720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000728:	3301      	adds	r3, #1
 800072a:	444b      	add	r3, r9
 800072c:	106d      	asrs	r5, r5, #1
 800072e:	429d      	cmp	r5, r3
 8000730:	bf38      	it	cc
 8000732:	461d      	movcc	r5, r3
 8000734:	0553      	lsls	r3, r2, #21
 8000736:	d531      	bpl.n	800079c <__ssputs_r+0xa0>
 8000738:	4629      	mov	r1, r5
 800073a:	f000 fb47 	bl	8000dcc <_malloc_r>
 800073e:	4606      	mov	r6, r0
 8000740:	b950      	cbnz	r0, 8000758 <__ssputs_r+0x5c>
 8000742:	230c      	movs	r3, #12
 8000744:	f8ca 3000 	str.w	r3, [sl]
 8000748:	89a3      	ldrh	r3, [r4, #12]
 800074a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074e:	81a3      	strh	r3, [r4, #12]
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000758:	6921      	ldr	r1, [r4, #16]
 800075a:	464a      	mov	r2, r9
 800075c:	f000 fabe 	bl	8000cdc <memcpy>
 8000760:	89a3      	ldrh	r3, [r4, #12]
 8000762:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076a:	81a3      	strh	r3, [r4, #12]
 800076c:	6126      	str	r6, [r4, #16]
 800076e:	6165      	str	r5, [r4, #20]
 8000770:	444e      	add	r6, r9
 8000772:	eba5 0509 	sub.w	r5, r5, r9
 8000776:	6026      	str	r6, [r4, #0]
 8000778:	60a5      	str	r5, [r4, #8]
 800077a:	463e      	mov	r6, r7
 800077c:	42be      	cmp	r6, r7
 800077e:	d900      	bls.n	8000782 <__ssputs_r+0x86>
 8000780:	463e      	mov	r6, r7
 8000782:	4632      	mov	r2, r6
 8000784:	6820      	ldr	r0, [r4, #0]
 8000786:	4641      	mov	r1, r8
 8000788:	f000 fab6 	bl	8000cf8 <memmove>
 800078c:	68a3      	ldr	r3, [r4, #8]
 800078e:	6822      	ldr	r2, [r4, #0]
 8000790:	1b9b      	subs	r3, r3, r6
 8000792:	4432      	add	r2, r6
 8000794:	60a3      	str	r3, [r4, #8]
 8000796:	6022      	str	r2, [r4, #0]
 8000798:	2000      	movs	r0, #0
 800079a:	e7db      	b.n	8000754 <__ssputs_r+0x58>
 800079c:	462a      	mov	r2, r5
 800079e:	f000 fb6f 	bl	8000e80 <_realloc_r>
 80007a2:	4606      	mov	r6, r0
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d1e1      	bne.n	800076c <__ssputs_r+0x70>
 80007a8:	6921      	ldr	r1, [r4, #16]
 80007aa:	4650      	mov	r0, sl
 80007ac:	f000 fabe 	bl	8000d2c <_free_r>
 80007b0:	e7c7      	b.n	8000742 <__ssputs_r+0x46>
	...

080007b4 <_svfiprintf_r>:
 80007b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007b8:	4698      	mov	r8, r3
 80007ba:	898b      	ldrh	r3, [r1, #12]
 80007bc:	061b      	lsls	r3, r3, #24
 80007be:	b09d      	sub	sp, #116	; 0x74
 80007c0:	4607      	mov	r7, r0
 80007c2:	460d      	mov	r5, r1
 80007c4:	4614      	mov	r4, r2
 80007c6:	d50e      	bpl.n	80007e6 <_svfiprintf_r+0x32>
 80007c8:	690b      	ldr	r3, [r1, #16]
 80007ca:	b963      	cbnz	r3, 80007e6 <_svfiprintf_r+0x32>
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	f000 fafd 	bl	8000dcc <_malloc_r>
 80007d2:	6028      	str	r0, [r5, #0]
 80007d4:	6128      	str	r0, [r5, #16]
 80007d6:	b920      	cbnz	r0, 80007e2 <_svfiprintf_r+0x2e>
 80007d8:	230c      	movs	r3, #12
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	e0d1      	b.n	8000986 <_svfiprintf_r+0x1d2>
 80007e2:	2340      	movs	r3, #64	; 0x40
 80007e4:	616b      	str	r3, [r5, #20]
 80007e6:	2300      	movs	r3, #0
 80007e8:	9309      	str	r3, [sp, #36]	; 0x24
 80007ea:	2320      	movs	r3, #32
 80007ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80007f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80007f4:	2330      	movs	r3, #48	; 0x30
 80007f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80009a0 <_svfiprintf_r+0x1ec>
 80007fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80007fe:	f04f 0901 	mov.w	r9, #1
 8000802:	4623      	mov	r3, r4
 8000804:	469a      	mov	sl, r3
 8000806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800080a:	b10a      	cbz	r2, 8000810 <_svfiprintf_r+0x5c>
 800080c:	2a25      	cmp	r2, #37	; 0x25
 800080e:	d1f9      	bne.n	8000804 <_svfiprintf_r+0x50>
 8000810:	ebba 0b04 	subs.w	fp, sl, r4
 8000814:	d00b      	beq.n	800082e <_svfiprintf_r+0x7a>
 8000816:	465b      	mov	r3, fp
 8000818:	4622      	mov	r2, r4
 800081a:	4629      	mov	r1, r5
 800081c:	4638      	mov	r0, r7
 800081e:	f7ff ff6d 	bl	80006fc <__ssputs_r>
 8000822:	3001      	adds	r0, #1
 8000824:	f000 80aa 	beq.w	800097c <_svfiprintf_r+0x1c8>
 8000828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800082a:	445a      	add	r2, fp
 800082c:	9209      	str	r2, [sp, #36]	; 0x24
 800082e:	f89a 3000 	ldrb.w	r3, [sl]
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 80a2 	beq.w	800097c <_svfiprintf_r+0x1c8>
 8000838:	2300      	movs	r3, #0
 800083a:	f04f 32ff 	mov.w	r2, #4294967295
 800083e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000842:	f10a 0a01 	add.w	sl, sl, #1
 8000846:	9304      	str	r3, [sp, #16]
 8000848:	9307      	str	r3, [sp, #28]
 800084a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800084e:	931a      	str	r3, [sp, #104]	; 0x68
 8000850:	4654      	mov	r4, sl
 8000852:	2205      	movs	r2, #5
 8000854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000858:	4851      	ldr	r0, [pc, #324]	; (80009a0 <_svfiprintf_r+0x1ec>)
 800085a:	f7ff fcc1 	bl	80001e0 <memchr>
 800085e:	9a04      	ldr	r2, [sp, #16]
 8000860:	b9d8      	cbnz	r0, 800089a <_svfiprintf_r+0xe6>
 8000862:	06d0      	lsls	r0, r2, #27
 8000864:	bf44      	itt	mi
 8000866:	2320      	movmi	r3, #32
 8000868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800086c:	0711      	lsls	r1, r2, #28
 800086e:	bf44      	itt	mi
 8000870:	232b      	movmi	r3, #43	; 0x2b
 8000872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000876:	f89a 3000 	ldrb.w	r3, [sl]
 800087a:	2b2a      	cmp	r3, #42	; 0x2a
 800087c:	d015      	beq.n	80008aa <_svfiprintf_r+0xf6>
 800087e:	9a07      	ldr	r2, [sp, #28]
 8000880:	4654      	mov	r4, sl
 8000882:	2000      	movs	r0, #0
 8000884:	f04f 0c0a 	mov.w	ip, #10
 8000888:	4621      	mov	r1, r4
 800088a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800088e:	3b30      	subs	r3, #48	; 0x30
 8000890:	2b09      	cmp	r3, #9
 8000892:	d94e      	bls.n	8000932 <_svfiprintf_r+0x17e>
 8000894:	b1b0      	cbz	r0, 80008c4 <_svfiprintf_r+0x110>
 8000896:	9207      	str	r2, [sp, #28]
 8000898:	e014      	b.n	80008c4 <_svfiprintf_r+0x110>
 800089a:	eba0 0308 	sub.w	r3, r0, r8
 800089e:	fa09 f303 	lsl.w	r3, r9, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	9304      	str	r3, [sp, #16]
 80008a6:	46a2      	mov	sl, r4
 80008a8:	e7d2      	b.n	8000850 <_svfiprintf_r+0x9c>
 80008aa:	9b03      	ldr	r3, [sp, #12]
 80008ac:	1d19      	adds	r1, r3, #4
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	9103      	str	r1, [sp, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bfbb      	ittet	lt
 80008b6:	425b      	neglt	r3, r3
 80008b8:	f042 0202 	orrlt.w	r2, r2, #2
 80008bc:	9307      	strge	r3, [sp, #28]
 80008be:	9307      	strlt	r3, [sp, #28]
 80008c0:	bfb8      	it	lt
 80008c2:	9204      	strlt	r2, [sp, #16]
 80008c4:	7823      	ldrb	r3, [r4, #0]
 80008c6:	2b2e      	cmp	r3, #46	; 0x2e
 80008c8:	d10c      	bne.n	80008e4 <_svfiprintf_r+0x130>
 80008ca:	7863      	ldrb	r3, [r4, #1]
 80008cc:	2b2a      	cmp	r3, #42	; 0x2a
 80008ce:	d135      	bne.n	800093c <_svfiprintf_r+0x188>
 80008d0:	9b03      	ldr	r3, [sp, #12]
 80008d2:	1d1a      	adds	r2, r3, #4
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	9203      	str	r2, [sp, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bfb8      	it	lt
 80008dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80008e0:	3402      	adds	r4, #2
 80008e2:	9305      	str	r3, [sp, #20]
 80008e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80009b0 <_svfiprintf_r+0x1fc>
 80008e8:	7821      	ldrb	r1, [r4, #0]
 80008ea:	2203      	movs	r2, #3
 80008ec:	4650      	mov	r0, sl
 80008ee:	f7ff fc77 	bl	80001e0 <memchr>
 80008f2:	b140      	cbz	r0, 8000906 <_svfiprintf_r+0x152>
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	eba0 000a 	sub.w	r0, r0, sl
 80008fa:	fa03 f000 	lsl.w	r0, r3, r0
 80008fe:	9b04      	ldr	r3, [sp, #16]
 8000900:	4303      	orrs	r3, r0
 8000902:	3401      	adds	r4, #1
 8000904:	9304      	str	r3, [sp, #16]
 8000906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800090a:	4826      	ldr	r0, [pc, #152]	; (80009a4 <_svfiprintf_r+0x1f0>)
 800090c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000910:	2206      	movs	r2, #6
 8000912:	f7ff fc65 	bl	80001e0 <memchr>
 8000916:	2800      	cmp	r0, #0
 8000918:	d038      	beq.n	800098c <_svfiprintf_r+0x1d8>
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <_svfiprintf_r+0x1f4>)
 800091c:	bb1b      	cbnz	r3, 8000966 <_svfiprintf_r+0x1b2>
 800091e:	9b03      	ldr	r3, [sp, #12]
 8000920:	3307      	adds	r3, #7
 8000922:	f023 0307 	bic.w	r3, r3, #7
 8000926:	3308      	adds	r3, #8
 8000928:	9303      	str	r3, [sp, #12]
 800092a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800092c:	4433      	add	r3, r6
 800092e:	9309      	str	r3, [sp, #36]	; 0x24
 8000930:	e767      	b.n	8000802 <_svfiprintf_r+0x4e>
 8000932:	fb0c 3202 	mla	r2, ip, r2, r3
 8000936:	460c      	mov	r4, r1
 8000938:	2001      	movs	r0, #1
 800093a:	e7a5      	b.n	8000888 <_svfiprintf_r+0xd4>
 800093c:	2300      	movs	r3, #0
 800093e:	3401      	adds	r4, #1
 8000940:	9305      	str	r3, [sp, #20]
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 0c0a 	mov.w	ip, #10
 8000948:	4620      	mov	r0, r4
 800094a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800094e:	3a30      	subs	r2, #48	; 0x30
 8000950:	2a09      	cmp	r2, #9
 8000952:	d903      	bls.n	800095c <_svfiprintf_r+0x1a8>
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0c5      	beq.n	80008e4 <_svfiprintf_r+0x130>
 8000958:	9105      	str	r1, [sp, #20]
 800095a:	e7c3      	b.n	80008e4 <_svfiprintf_r+0x130>
 800095c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000960:	4604      	mov	r4, r0
 8000962:	2301      	movs	r3, #1
 8000964:	e7f0      	b.n	8000948 <_svfiprintf_r+0x194>
 8000966:	ab03      	add	r3, sp, #12
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	462a      	mov	r2, r5
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <_svfiprintf_r+0x1f8>)
 800096e:	a904      	add	r1, sp, #16
 8000970:	4638      	mov	r0, r7
 8000972:	f3af 8000 	nop.w
 8000976:	1c42      	adds	r2, r0, #1
 8000978:	4606      	mov	r6, r0
 800097a:	d1d6      	bne.n	800092a <_svfiprintf_r+0x176>
 800097c:	89ab      	ldrh	r3, [r5, #12]
 800097e:	065b      	lsls	r3, r3, #25
 8000980:	f53f af2c 	bmi.w	80007dc <_svfiprintf_r+0x28>
 8000984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000986:	b01d      	add	sp, #116	; 0x74
 8000988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800098c:	ab03      	add	r3, sp, #12
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	462a      	mov	r2, r5
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <_svfiprintf_r+0x1f8>)
 8000994:	a904      	add	r1, sp, #16
 8000996:	4638      	mov	r0, r7
 8000998:	f000 f87a 	bl	8000a90 <_printf_i>
 800099c:	e7eb      	b.n	8000976 <_svfiprintf_r+0x1c2>
 800099e:	bf00      	nop
 80009a0:	08000f4c 	.word	0x08000f4c
 80009a4:	08000f56 	.word	0x08000f56
 80009a8:	00000000 	.word	0x00000000
 80009ac:	080006fd 	.word	0x080006fd
 80009b0:	08000f52 	.word	0x08000f52

080009b4 <_printf_common>:
 80009b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b8:	4616      	mov	r6, r2
 80009ba:	4699      	mov	r9, r3
 80009bc:	688a      	ldr	r2, [r1, #8]
 80009be:	690b      	ldr	r3, [r1, #16]
 80009c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80009c4:	4293      	cmp	r3, r2
 80009c6:	bfb8      	it	lt
 80009c8:	4613      	movlt	r3, r2
 80009ca:	6033      	str	r3, [r6, #0]
 80009cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80009d0:	4607      	mov	r7, r0
 80009d2:	460c      	mov	r4, r1
 80009d4:	b10a      	cbz	r2, 80009da <_printf_common+0x26>
 80009d6:	3301      	adds	r3, #1
 80009d8:	6033      	str	r3, [r6, #0]
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	0699      	lsls	r1, r3, #26
 80009de:	bf42      	ittt	mi
 80009e0:	6833      	ldrmi	r3, [r6, #0]
 80009e2:	3302      	addmi	r3, #2
 80009e4:	6033      	strmi	r3, [r6, #0]
 80009e6:	6825      	ldr	r5, [r4, #0]
 80009e8:	f015 0506 	ands.w	r5, r5, #6
 80009ec:	d106      	bne.n	80009fc <_printf_common+0x48>
 80009ee:	f104 0a19 	add.w	sl, r4, #25
 80009f2:	68e3      	ldr	r3, [r4, #12]
 80009f4:	6832      	ldr	r2, [r6, #0]
 80009f6:	1a9b      	subs	r3, r3, r2
 80009f8:	42ab      	cmp	r3, r5
 80009fa:	dc26      	bgt.n	8000a4a <_printf_common+0x96>
 80009fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000a00:	1e13      	subs	r3, r2, #0
 8000a02:	6822      	ldr	r2, [r4, #0]
 8000a04:	bf18      	it	ne
 8000a06:	2301      	movne	r3, #1
 8000a08:	0692      	lsls	r2, r2, #26
 8000a0a:	d42b      	bmi.n	8000a64 <_printf_common+0xb0>
 8000a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000a10:	4649      	mov	r1, r9
 8000a12:	4638      	mov	r0, r7
 8000a14:	47c0      	blx	r8
 8000a16:	3001      	adds	r0, #1
 8000a18:	d01e      	beq.n	8000a58 <_printf_common+0xa4>
 8000a1a:	6823      	ldr	r3, [r4, #0]
 8000a1c:	68e5      	ldr	r5, [r4, #12]
 8000a1e:	6832      	ldr	r2, [r6, #0]
 8000a20:	f003 0306 	and.w	r3, r3, #6
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	bf08      	it	eq
 8000a28:	1aad      	subeq	r5, r5, r2
 8000a2a:	68a3      	ldr	r3, [r4, #8]
 8000a2c:	6922      	ldr	r2, [r4, #16]
 8000a2e:	bf0c      	ite	eq
 8000a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000a34:	2500      	movne	r5, #0
 8000a36:	4293      	cmp	r3, r2
 8000a38:	bfc4      	itt	gt
 8000a3a:	1a9b      	subgt	r3, r3, r2
 8000a3c:	18ed      	addgt	r5, r5, r3
 8000a3e:	2600      	movs	r6, #0
 8000a40:	341a      	adds	r4, #26
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d11a      	bne.n	8000a7c <_printf_common+0xc8>
 8000a46:	2000      	movs	r0, #0
 8000a48:	e008      	b.n	8000a5c <_printf_common+0xa8>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	4652      	mov	r2, sl
 8000a4e:	4649      	mov	r1, r9
 8000a50:	4638      	mov	r0, r7
 8000a52:	47c0      	blx	r8
 8000a54:	3001      	adds	r0, #1
 8000a56:	d103      	bne.n	8000a60 <_printf_common+0xac>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a60:	3501      	adds	r5, #1
 8000a62:	e7c6      	b.n	80009f2 <_printf_common+0x3e>
 8000a64:	18e1      	adds	r1, r4, r3
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	2030      	movs	r0, #48	; 0x30
 8000a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000a6e:	4422      	add	r2, r4
 8000a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000a78:	3302      	adds	r3, #2
 8000a7a:	e7c7      	b.n	8000a0c <_printf_common+0x58>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	4622      	mov	r2, r4
 8000a80:	4649      	mov	r1, r9
 8000a82:	4638      	mov	r0, r7
 8000a84:	47c0      	blx	r8
 8000a86:	3001      	adds	r0, #1
 8000a88:	d0e6      	beq.n	8000a58 <_printf_common+0xa4>
 8000a8a:	3601      	adds	r6, #1
 8000a8c:	e7d9      	b.n	8000a42 <_printf_common+0x8e>
	...

08000a90 <_printf_i>:
 8000a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000a94:	460c      	mov	r4, r1
 8000a96:	4691      	mov	r9, r2
 8000a98:	7e27      	ldrb	r7, [r4, #24]
 8000a9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000a9c:	2f78      	cmp	r7, #120	; 0x78
 8000a9e:	4680      	mov	r8, r0
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000aa6:	d807      	bhi.n	8000ab8 <_printf_i+0x28>
 8000aa8:	2f62      	cmp	r7, #98	; 0x62
 8000aaa:	d80a      	bhi.n	8000ac2 <_printf_i+0x32>
 8000aac:	2f00      	cmp	r7, #0
 8000aae:	f000 80d8 	beq.w	8000c62 <_printf_i+0x1d2>
 8000ab2:	2f58      	cmp	r7, #88	; 0x58
 8000ab4:	f000 80a3 	beq.w	8000bfe <_printf_i+0x16e>
 8000ab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ac0:	e03a      	b.n	8000b38 <_printf_i+0xa8>
 8000ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ac6:	2b15      	cmp	r3, #21
 8000ac8:	d8f6      	bhi.n	8000ab8 <_printf_i+0x28>
 8000aca:	a001      	add	r0, pc, #4	; (adr r0, 8000ad0 <_printf_i+0x40>)
 8000acc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000ad0:	08000b29 	.word	0x08000b29
 8000ad4:	08000b3d 	.word	0x08000b3d
 8000ad8:	08000ab9 	.word	0x08000ab9
 8000adc:	08000ab9 	.word	0x08000ab9
 8000ae0:	08000ab9 	.word	0x08000ab9
 8000ae4:	08000ab9 	.word	0x08000ab9
 8000ae8:	08000b3d 	.word	0x08000b3d
 8000aec:	08000ab9 	.word	0x08000ab9
 8000af0:	08000ab9 	.word	0x08000ab9
 8000af4:	08000ab9 	.word	0x08000ab9
 8000af8:	08000ab9 	.word	0x08000ab9
 8000afc:	08000c49 	.word	0x08000c49
 8000b00:	08000b6d 	.word	0x08000b6d
 8000b04:	08000c2b 	.word	0x08000c2b
 8000b08:	08000ab9 	.word	0x08000ab9
 8000b0c:	08000ab9 	.word	0x08000ab9
 8000b10:	08000c6b 	.word	0x08000c6b
 8000b14:	08000ab9 	.word	0x08000ab9
 8000b18:	08000b6d 	.word	0x08000b6d
 8000b1c:	08000ab9 	.word	0x08000ab9
 8000b20:	08000ab9 	.word	0x08000ab9
 8000b24:	08000c33 	.word	0x08000c33
 8000b28:	680b      	ldr	r3, [r1, #0]
 8000b2a:	1d1a      	adds	r2, r3, #4
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	600a      	str	r2, [r1, #0]
 8000b30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e0a3      	b.n	8000c84 <_printf_i+0x1f4>
 8000b3c:	6825      	ldr	r5, [r4, #0]
 8000b3e:	6808      	ldr	r0, [r1, #0]
 8000b40:	062e      	lsls	r6, r5, #24
 8000b42:	f100 0304 	add.w	r3, r0, #4
 8000b46:	d50a      	bpl.n	8000b5e <_printf_i+0xce>
 8000b48:	6805      	ldr	r5, [r0, #0]
 8000b4a:	600b      	str	r3, [r1, #0]
 8000b4c:	2d00      	cmp	r5, #0
 8000b4e:	da03      	bge.n	8000b58 <_printf_i+0xc8>
 8000b50:	232d      	movs	r3, #45	; 0x2d
 8000b52:	426d      	negs	r5, r5
 8000b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000b58:	485e      	ldr	r0, [pc, #376]	; (8000cd4 <_printf_i+0x244>)
 8000b5a:	230a      	movs	r3, #10
 8000b5c:	e019      	b.n	8000b92 <_printf_i+0x102>
 8000b5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000b62:	6805      	ldr	r5, [r0, #0]
 8000b64:	600b      	str	r3, [r1, #0]
 8000b66:	bf18      	it	ne
 8000b68:	b22d      	sxthne	r5, r5
 8000b6a:	e7ef      	b.n	8000b4c <_printf_i+0xbc>
 8000b6c:	680b      	ldr	r3, [r1, #0]
 8000b6e:	6825      	ldr	r5, [r4, #0]
 8000b70:	1d18      	adds	r0, r3, #4
 8000b72:	6008      	str	r0, [r1, #0]
 8000b74:	0628      	lsls	r0, r5, #24
 8000b76:	d501      	bpl.n	8000b7c <_printf_i+0xec>
 8000b78:	681d      	ldr	r5, [r3, #0]
 8000b7a:	e002      	b.n	8000b82 <_printf_i+0xf2>
 8000b7c:	0669      	lsls	r1, r5, #25
 8000b7e:	d5fb      	bpl.n	8000b78 <_printf_i+0xe8>
 8000b80:	881d      	ldrh	r5, [r3, #0]
 8000b82:	4854      	ldr	r0, [pc, #336]	; (8000cd4 <_printf_i+0x244>)
 8000b84:	2f6f      	cmp	r7, #111	; 0x6f
 8000b86:	bf0c      	ite	eq
 8000b88:	2308      	moveq	r3, #8
 8000b8a:	230a      	movne	r3, #10
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000b92:	6866      	ldr	r6, [r4, #4]
 8000b94:	60a6      	str	r6, [r4, #8]
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	bfa2      	ittt	ge
 8000b9a:	6821      	ldrge	r1, [r4, #0]
 8000b9c:	f021 0104 	bicge.w	r1, r1, #4
 8000ba0:	6021      	strge	r1, [r4, #0]
 8000ba2:	b90d      	cbnz	r5, 8000ba8 <_printf_i+0x118>
 8000ba4:	2e00      	cmp	r6, #0
 8000ba6:	d04d      	beq.n	8000c44 <_printf_i+0x1b4>
 8000ba8:	4616      	mov	r6, r2
 8000baa:	fbb5 f1f3 	udiv	r1, r5, r3
 8000bae:	fb03 5711 	mls	r7, r3, r1, r5
 8000bb2:	5dc7      	ldrb	r7, [r0, r7]
 8000bb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000bb8:	462f      	mov	r7, r5
 8000bba:	42bb      	cmp	r3, r7
 8000bbc:	460d      	mov	r5, r1
 8000bbe:	d9f4      	bls.n	8000baa <_printf_i+0x11a>
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d10b      	bne.n	8000bdc <_printf_i+0x14c>
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	07df      	lsls	r7, r3, #31
 8000bc8:	d508      	bpl.n	8000bdc <_printf_i+0x14c>
 8000bca:	6923      	ldr	r3, [r4, #16]
 8000bcc:	6861      	ldr	r1, [r4, #4]
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	bfde      	ittt	le
 8000bd2:	2330      	movle	r3, #48	; 0x30
 8000bd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000bd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000bdc:	1b92      	subs	r2, r2, r6
 8000bde:	6122      	str	r2, [r4, #16]
 8000be0:	f8cd a000 	str.w	sl, [sp]
 8000be4:	464b      	mov	r3, r9
 8000be6:	aa03      	add	r2, sp, #12
 8000be8:	4621      	mov	r1, r4
 8000bea:	4640      	mov	r0, r8
 8000bec:	f7ff fee2 	bl	80009b4 <_printf_common>
 8000bf0:	3001      	adds	r0, #1
 8000bf2:	d14c      	bne.n	8000c8e <_printf_i+0x1fe>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	b004      	add	sp, #16
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	4835      	ldr	r0, [pc, #212]	; (8000cd4 <_printf_i+0x244>)
 8000c00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	680e      	ldr	r6, [r1, #0]
 8000c08:	061f      	lsls	r7, r3, #24
 8000c0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8000c0e:	600e      	str	r6, [r1, #0]
 8000c10:	d514      	bpl.n	8000c3c <_printf_i+0x1ac>
 8000c12:	07d9      	lsls	r1, r3, #31
 8000c14:	bf44      	itt	mi
 8000c16:	f043 0320 	orrmi.w	r3, r3, #32
 8000c1a:	6023      	strmi	r3, [r4, #0]
 8000c1c:	b91d      	cbnz	r5, 8000c26 <_printf_i+0x196>
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	f023 0320 	bic.w	r3, r3, #32
 8000c24:	6023      	str	r3, [r4, #0]
 8000c26:	2310      	movs	r3, #16
 8000c28:	e7b0      	b.n	8000b8c <_printf_i+0xfc>
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	f043 0320 	orr.w	r3, r3, #32
 8000c30:	6023      	str	r3, [r4, #0]
 8000c32:	2378      	movs	r3, #120	; 0x78
 8000c34:	4828      	ldr	r0, [pc, #160]	; (8000cd8 <_printf_i+0x248>)
 8000c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c3a:	e7e3      	b.n	8000c04 <_printf_i+0x174>
 8000c3c:	065e      	lsls	r6, r3, #25
 8000c3e:	bf48      	it	mi
 8000c40:	b2ad      	uxthmi	r5, r5
 8000c42:	e7e6      	b.n	8000c12 <_printf_i+0x182>
 8000c44:	4616      	mov	r6, r2
 8000c46:	e7bb      	b.n	8000bc0 <_printf_i+0x130>
 8000c48:	680b      	ldr	r3, [r1, #0]
 8000c4a:	6826      	ldr	r6, [r4, #0]
 8000c4c:	6960      	ldr	r0, [r4, #20]
 8000c4e:	1d1d      	adds	r5, r3, #4
 8000c50:	600d      	str	r5, [r1, #0]
 8000c52:	0635      	lsls	r5, r6, #24
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	d501      	bpl.n	8000c5c <_printf_i+0x1cc>
 8000c58:	6018      	str	r0, [r3, #0]
 8000c5a:	e002      	b.n	8000c62 <_printf_i+0x1d2>
 8000c5c:	0671      	lsls	r1, r6, #25
 8000c5e:	d5fb      	bpl.n	8000c58 <_printf_i+0x1c8>
 8000c60:	8018      	strh	r0, [r3, #0]
 8000c62:	2300      	movs	r3, #0
 8000c64:	6123      	str	r3, [r4, #16]
 8000c66:	4616      	mov	r6, r2
 8000c68:	e7ba      	b.n	8000be0 <_printf_i+0x150>
 8000c6a:	680b      	ldr	r3, [r1, #0]
 8000c6c:	1d1a      	adds	r2, r3, #4
 8000c6e:	600a      	str	r2, [r1, #0]
 8000c70:	681e      	ldr	r6, [r3, #0]
 8000c72:	6862      	ldr	r2, [r4, #4]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4630      	mov	r0, r6
 8000c78:	f7ff fab2 	bl	80001e0 <memchr>
 8000c7c:	b108      	cbz	r0, 8000c82 <_printf_i+0x1f2>
 8000c7e:	1b80      	subs	r0, r0, r6
 8000c80:	6060      	str	r0, [r4, #4]
 8000c82:	6863      	ldr	r3, [r4, #4]
 8000c84:	6123      	str	r3, [r4, #16]
 8000c86:	2300      	movs	r3, #0
 8000c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000c8c:	e7a8      	b.n	8000be0 <_printf_i+0x150>
 8000c8e:	6923      	ldr	r3, [r4, #16]
 8000c90:	4632      	mov	r2, r6
 8000c92:	4649      	mov	r1, r9
 8000c94:	4640      	mov	r0, r8
 8000c96:	47d0      	blx	sl
 8000c98:	3001      	adds	r0, #1
 8000c9a:	d0ab      	beq.n	8000bf4 <_printf_i+0x164>
 8000c9c:	6823      	ldr	r3, [r4, #0]
 8000c9e:	079b      	lsls	r3, r3, #30
 8000ca0:	d413      	bmi.n	8000cca <_printf_i+0x23a>
 8000ca2:	68e0      	ldr	r0, [r4, #12]
 8000ca4:	9b03      	ldr	r3, [sp, #12]
 8000ca6:	4298      	cmp	r0, r3
 8000ca8:	bfb8      	it	lt
 8000caa:	4618      	movlt	r0, r3
 8000cac:	e7a4      	b.n	8000bf8 <_printf_i+0x168>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	4632      	mov	r2, r6
 8000cb2:	4649      	mov	r1, r9
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	47d0      	blx	sl
 8000cb8:	3001      	adds	r0, #1
 8000cba:	d09b      	beq.n	8000bf4 <_printf_i+0x164>
 8000cbc:	3501      	adds	r5, #1
 8000cbe:	68e3      	ldr	r3, [r4, #12]
 8000cc0:	9903      	ldr	r1, [sp, #12]
 8000cc2:	1a5b      	subs	r3, r3, r1
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	dcf2      	bgt.n	8000cae <_printf_i+0x21e>
 8000cc8:	e7eb      	b.n	8000ca2 <_printf_i+0x212>
 8000cca:	2500      	movs	r5, #0
 8000ccc:	f104 0619 	add.w	r6, r4, #25
 8000cd0:	e7f5      	b.n	8000cbe <_printf_i+0x22e>
 8000cd2:	bf00      	nop
 8000cd4:	08000f5d 	.word	0x08000f5d
 8000cd8:	08000f6e 	.word	0x08000f6e

08000cdc <memcpy>:
 8000cdc:	440a      	add	r2, r1
 8000cde:	4291      	cmp	r1, r2
 8000ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce4:	d100      	bne.n	8000ce8 <memcpy+0xc>
 8000ce6:	4770      	bx	lr
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000cf2:	4291      	cmp	r1, r2
 8000cf4:	d1f9      	bne.n	8000cea <memcpy+0xe>
 8000cf6:	bd10      	pop	{r4, pc}

08000cf8 <memmove>:
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	b510      	push	{r4, lr}
 8000cfc:	eb01 0402 	add.w	r4, r1, r2
 8000d00:	d902      	bls.n	8000d08 <memmove+0x10>
 8000d02:	4284      	cmp	r4, r0
 8000d04:	4623      	mov	r3, r4
 8000d06:	d807      	bhi.n	8000d18 <memmove+0x20>
 8000d08:	1e43      	subs	r3, r0, #1
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	d008      	beq.n	8000d20 <memmove+0x28>
 8000d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000d16:	e7f8      	b.n	8000d0a <memmove+0x12>
 8000d18:	4402      	add	r2, r0
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	428a      	cmp	r2, r1
 8000d1e:	d100      	bne.n	8000d22 <memmove+0x2a>
 8000d20:	bd10      	pop	{r4, pc}
 8000d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000d2a:	e7f7      	b.n	8000d1c <memmove+0x24>

08000d2c <_free_r>:
 8000d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d2e:	2900      	cmp	r1, #0
 8000d30:	d048      	beq.n	8000dc4 <_free_r+0x98>
 8000d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d36:	9001      	str	r0, [sp, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f1a1 0404 	sub.w	r4, r1, #4
 8000d3e:	bfb8      	it	lt
 8000d40:	18e4      	addlt	r4, r4, r3
 8000d42:	f000 f8d3 	bl	8000eec <__malloc_lock>
 8000d46:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <_free_r+0x9c>)
 8000d48:	9801      	ldr	r0, [sp, #4]
 8000d4a:	6813      	ldr	r3, [r2, #0]
 8000d4c:	4615      	mov	r5, r2
 8000d4e:	b933      	cbnz	r3, 8000d5e <_free_r+0x32>
 8000d50:	6063      	str	r3, [r4, #4]
 8000d52:	6014      	str	r4, [r2, #0]
 8000d54:	b003      	add	sp, #12
 8000d56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d5a:	f000 b8cd 	b.w	8000ef8 <__malloc_unlock>
 8000d5e:	42a3      	cmp	r3, r4
 8000d60:	d90b      	bls.n	8000d7a <_free_r+0x4e>
 8000d62:	6821      	ldr	r1, [r4, #0]
 8000d64:	1862      	adds	r2, r4, r1
 8000d66:	4293      	cmp	r3, r2
 8000d68:	bf04      	itt	eq
 8000d6a:	681a      	ldreq	r2, [r3, #0]
 8000d6c:	685b      	ldreq	r3, [r3, #4]
 8000d6e:	6063      	str	r3, [r4, #4]
 8000d70:	bf04      	itt	eq
 8000d72:	1852      	addeq	r2, r2, r1
 8000d74:	6022      	streq	r2, [r4, #0]
 8000d76:	602c      	str	r4, [r5, #0]
 8000d78:	e7ec      	b.n	8000d54 <_free_r+0x28>
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	b10b      	cbz	r3, 8000d84 <_free_r+0x58>
 8000d80:	42a3      	cmp	r3, r4
 8000d82:	d9fa      	bls.n	8000d7a <_free_r+0x4e>
 8000d84:	6811      	ldr	r1, [r2, #0]
 8000d86:	1855      	adds	r5, r2, r1
 8000d88:	42a5      	cmp	r5, r4
 8000d8a:	d10b      	bne.n	8000da4 <_free_r+0x78>
 8000d8c:	6824      	ldr	r4, [r4, #0]
 8000d8e:	4421      	add	r1, r4
 8000d90:	1854      	adds	r4, r2, r1
 8000d92:	42a3      	cmp	r3, r4
 8000d94:	6011      	str	r1, [r2, #0]
 8000d96:	d1dd      	bne.n	8000d54 <_free_r+0x28>
 8000d98:	681c      	ldr	r4, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	6053      	str	r3, [r2, #4]
 8000d9e:	4421      	add	r1, r4
 8000da0:	6011      	str	r1, [r2, #0]
 8000da2:	e7d7      	b.n	8000d54 <_free_r+0x28>
 8000da4:	d902      	bls.n	8000dac <_free_r+0x80>
 8000da6:	230c      	movs	r3, #12
 8000da8:	6003      	str	r3, [r0, #0]
 8000daa:	e7d3      	b.n	8000d54 <_free_r+0x28>
 8000dac:	6825      	ldr	r5, [r4, #0]
 8000dae:	1961      	adds	r1, r4, r5
 8000db0:	428b      	cmp	r3, r1
 8000db2:	bf04      	itt	eq
 8000db4:	6819      	ldreq	r1, [r3, #0]
 8000db6:	685b      	ldreq	r3, [r3, #4]
 8000db8:	6063      	str	r3, [r4, #4]
 8000dba:	bf04      	itt	eq
 8000dbc:	1949      	addeq	r1, r1, r5
 8000dbe:	6021      	streq	r1, [r4, #0]
 8000dc0:	6054      	str	r4, [r2, #4]
 8000dc2:	e7c7      	b.n	8000d54 <_free_r+0x28>
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd30      	pop	{r4, r5, pc}
 8000dc8:	20000088 	.word	0x20000088

08000dcc <_malloc_r>:
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dce:	1ccd      	adds	r5, r1, #3
 8000dd0:	f025 0503 	bic.w	r5, r5, #3
 8000dd4:	3508      	adds	r5, #8
 8000dd6:	2d0c      	cmp	r5, #12
 8000dd8:	bf38      	it	cc
 8000dda:	250c      	movcc	r5, #12
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	db01      	blt.n	8000de6 <_malloc_r+0x1a>
 8000de2:	42a9      	cmp	r1, r5
 8000de4:	d903      	bls.n	8000dee <_malloc_r+0x22>
 8000de6:	230c      	movs	r3, #12
 8000de8:	6033      	str	r3, [r6, #0]
 8000dea:	2000      	movs	r0, #0
 8000dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dee:	f000 f87d 	bl	8000eec <__malloc_lock>
 8000df2:	4921      	ldr	r1, [pc, #132]	; (8000e78 <_malloc_r+0xac>)
 8000df4:	680a      	ldr	r2, [r1, #0]
 8000df6:	4614      	mov	r4, r2
 8000df8:	b99c      	cbnz	r4, 8000e22 <_malloc_r+0x56>
 8000dfa:	4f20      	ldr	r7, [pc, #128]	; (8000e7c <_malloc_r+0xb0>)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b923      	cbnz	r3, 8000e0a <_malloc_r+0x3e>
 8000e00:	4621      	mov	r1, r4
 8000e02:	4630      	mov	r0, r6
 8000e04:	f000 f862 	bl	8000ecc <_sbrk_r>
 8000e08:	6038      	str	r0, [r7, #0]
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	f000 f85d 	bl	8000ecc <_sbrk_r>
 8000e12:	1c43      	adds	r3, r0, #1
 8000e14:	d123      	bne.n	8000e5e <_malloc_r+0x92>
 8000e16:	230c      	movs	r3, #12
 8000e18:	6033      	str	r3, [r6, #0]
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	f000 f86c 	bl	8000ef8 <__malloc_unlock>
 8000e20:	e7e3      	b.n	8000dea <_malloc_r+0x1e>
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	1b5b      	subs	r3, r3, r5
 8000e26:	d417      	bmi.n	8000e58 <_malloc_r+0x8c>
 8000e28:	2b0b      	cmp	r3, #11
 8000e2a:	d903      	bls.n	8000e34 <_malloc_r+0x68>
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	441c      	add	r4, r3
 8000e30:	6025      	str	r5, [r4, #0]
 8000e32:	e004      	b.n	8000e3e <_malloc_r+0x72>
 8000e34:	6863      	ldr	r3, [r4, #4]
 8000e36:	42a2      	cmp	r2, r4
 8000e38:	bf0c      	ite	eq
 8000e3a:	600b      	streq	r3, [r1, #0]
 8000e3c:	6053      	strne	r3, [r2, #4]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	f000 f85a 	bl	8000ef8 <__malloc_unlock>
 8000e44:	f104 000b 	add.w	r0, r4, #11
 8000e48:	1d23      	adds	r3, r4, #4
 8000e4a:	f020 0007 	bic.w	r0, r0, #7
 8000e4e:	1ac2      	subs	r2, r0, r3
 8000e50:	d0cc      	beq.n	8000dec <_malloc_r+0x20>
 8000e52:	1a1b      	subs	r3, r3, r0
 8000e54:	50a3      	str	r3, [r4, r2]
 8000e56:	e7c9      	b.n	8000dec <_malloc_r+0x20>
 8000e58:	4622      	mov	r2, r4
 8000e5a:	6864      	ldr	r4, [r4, #4]
 8000e5c:	e7cc      	b.n	8000df8 <_malloc_r+0x2c>
 8000e5e:	1cc4      	adds	r4, r0, #3
 8000e60:	f024 0403 	bic.w	r4, r4, #3
 8000e64:	42a0      	cmp	r0, r4
 8000e66:	d0e3      	beq.n	8000e30 <_malloc_r+0x64>
 8000e68:	1a21      	subs	r1, r4, r0
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	f000 f82e 	bl	8000ecc <_sbrk_r>
 8000e70:	3001      	adds	r0, #1
 8000e72:	d1dd      	bne.n	8000e30 <_malloc_r+0x64>
 8000e74:	e7cf      	b.n	8000e16 <_malloc_r+0x4a>
 8000e76:	bf00      	nop
 8000e78:	20000088 	.word	0x20000088
 8000e7c:	2000008c 	.word	0x2000008c

08000e80 <_realloc_r>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	4607      	mov	r7, r0
 8000e84:	4614      	mov	r4, r2
 8000e86:	460e      	mov	r6, r1
 8000e88:	b921      	cbnz	r1, 8000e94 <_realloc_r+0x14>
 8000e8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000e8e:	4611      	mov	r1, r2
 8000e90:	f7ff bf9c 	b.w	8000dcc <_malloc_r>
 8000e94:	b922      	cbnz	r2, 8000ea0 <_realloc_r+0x20>
 8000e96:	f7ff ff49 	bl	8000d2c <_free_r>
 8000e9a:	4625      	mov	r5, r4
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea0:	f000 f830 	bl	8000f04 <_malloc_usable_size_r>
 8000ea4:	42a0      	cmp	r0, r4
 8000ea6:	d20f      	bcs.n	8000ec8 <_realloc_r+0x48>
 8000ea8:	4621      	mov	r1, r4
 8000eaa:	4638      	mov	r0, r7
 8000eac:	f7ff ff8e 	bl	8000dcc <_malloc_r>
 8000eb0:	4605      	mov	r5, r0
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d0f2      	beq.n	8000e9c <_realloc_r+0x1c>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4622      	mov	r2, r4
 8000eba:	f7ff ff0f 	bl	8000cdc <memcpy>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	f7ff ff33 	bl	8000d2c <_free_r>
 8000ec6:	e7e9      	b.n	8000e9c <_realloc_r+0x1c>
 8000ec8:	4635      	mov	r5, r6
 8000eca:	e7e7      	b.n	8000e9c <_realloc_r+0x1c>

08000ecc <_sbrk_r>:
 8000ecc:	b538      	push	{r3, r4, r5, lr}
 8000ece:	4d06      	ldr	r5, [pc, #24]	; (8000ee8 <_sbrk_r+0x1c>)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	602b      	str	r3, [r5, #0]
 8000ed8:	f7ff fb40 	bl	800055c <_sbrk>
 8000edc:	1c43      	adds	r3, r0, #1
 8000ede:	d102      	bne.n	8000ee6 <_sbrk_r+0x1a>
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	b103      	cbz	r3, 8000ee6 <_sbrk_r+0x1a>
 8000ee4:	6023      	str	r3, [r4, #0]
 8000ee6:	bd38      	pop	{r3, r4, r5, pc}
 8000ee8:	20000094 	.word	0x20000094

08000eec <__malloc_lock>:
 8000eec:	4801      	ldr	r0, [pc, #4]	; (8000ef4 <__malloc_lock+0x8>)
 8000eee:	f000 b811 	b.w	8000f14 <__retarget_lock_acquire_recursive>
 8000ef2:	bf00      	nop
 8000ef4:	2000009c 	.word	0x2000009c

08000ef8 <__malloc_unlock>:
 8000ef8:	4801      	ldr	r0, [pc, #4]	; (8000f00 <__malloc_unlock+0x8>)
 8000efa:	f000 b80c 	b.w	8000f16 <__retarget_lock_release_recursive>
 8000efe:	bf00      	nop
 8000f00:	2000009c 	.word	0x2000009c

08000f04 <_malloc_usable_size_r>:
 8000f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f08:	1f18      	subs	r0, r3, #4
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bfbc      	itt	lt
 8000f0e:	580b      	ldrlt	r3, [r1, r0]
 8000f10:	18c0      	addlt	r0, r0, r3
 8000f12:	4770      	bx	lr

08000f14 <__retarget_lock_acquire_recursive>:
 8000f14:	4770      	bx	lr

08000f16 <__retarget_lock_release_recursive>:
 8000f16:	4770      	bx	lr

08000f18 <_init>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	bf00      	nop
 8000f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1e:	bc08      	pop	{r3}
 8000f20:	469e      	mov	lr, r3
 8000f22:	4770      	bx	lr

08000f24 <_fini>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr
