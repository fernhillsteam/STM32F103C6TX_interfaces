
ADC_LM34.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000155c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001774  08001774  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001774  08001774  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001774  08001774  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001774  08001774  00011774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001778  08001778  00011778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800177c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  080017e4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080017e4  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b07  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008b8  00000000  00000000  00022b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00023458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c0  00000000  00000000  00023670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001498b  00000000  00000000  00023830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002703  00000000  00000000  000381bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081a03  00000000  00000000  0003a8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc2c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b70  00000000  00000000  000bc314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080016e4 	.word	0x080016e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080016e4 	.word	0x080016e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr
 8000a5c:	0000      	movs	r0, r0
	...

08000a60 <main>:
void UART2_SendString (char *string);
void usart2_sendInt(unsigned int i);
void delayMs(int n);

int main (void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
    int result;
    double temp;

    ADC1_init();
 8000a66:	f000 f85d 	bl	8000b24 <ADC1_init>
    USART2_init();
 8000a6a:	f000 f889 	bl	8000b80 <USART2_init>

    UART2_SendString("LM34 Temperature Sensor\r\n");
 8000a6e:	4828      	ldr	r0, [pc, #160]	; (8000b10 <main+0xb0>)
 8000a70:	f000 f8e6 	bl	8000c40 <UART2_SendString>
    delayMs(1000);
 8000a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a78:	f000 f90e 	bl	8000c98 <delayMs>
    while (1)
    {
        ADC1->CR2 |= 0x40000000;        /* start a conversion */
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <main+0xb4>)
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <main+0xb4>)
 8000a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a86:	6093      	str	r3, [r2, #8]
        while(!(ADC1->SR & 2)) {}       /* wait for conv complete */
 8000a88:	bf00      	nop
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <main+0xb4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d0f9      	beq.n	8000a8a <main+0x2a>
        result = ADC1->DR;              /* read conversion result */
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <main+0xb4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	60fb      	str	r3, [r7, #12]
        temp = (double)result / 4095 * 330;
 8000a9c:	68f8      	ldr	r0, [r7, #12]
 8000a9e:	f7ff fd41 	bl	8000524 <__aeabi_i2d>
 8000aa2:	a317      	add	r3, pc, #92	; (adr r3, 8000b00 <main+0xa0>)
 8000aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa8:	f7ff fed0 	bl	800084c <__aeabi_ddiv>
 8000aac:	4602      	mov	r2, r0
 8000aae:	460b      	mov	r3, r1
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	a314      	add	r3, pc, #80	; (adr r3, 8000b08 <main+0xa8>)
 8000ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aba:	f7ff fd9d 	bl	80005f8 <__aeabi_dmul>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	e9c7 2300 	strd	r2, r3, [r7]
        UART2_SendString("ADC value is: ");
 8000ac6:	4814      	ldr	r0, [pc, #80]	; (8000b18 <main+0xb8>)
 8000ac8:	f000 f8ba 	bl	8000c40 <UART2_SendString>
        usart2_sendInt(result);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f8cc 	bl	8000c6c <usart2_sendInt>
        UART2_SendString("\r\n ");
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <main+0xbc>)
 8000ad6:	f000 f8b3 	bl	8000c40 <UART2_SendString>
        UART2_SendString("temp value : ");
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <main+0xc0>)
 8000adc:	f000 f8b0 	bl	8000c40 <UART2_SendString>
        usart2_sendInt(temp);
 8000ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ae4:	f7ff ff9a 	bl	8000a1c <__aeabi_d2uiz>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f8be 	bl	8000c6c <usart2_sendInt>
        UART2_SendString("\r\n ");
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <main+0xbc>)
 8000af2:	f000 f8a5 	bl	8000c40 <UART2_SendString>
        delayMs(1000);
 8000af6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afa:	f000 f8cd 	bl	8000c98 <delayMs>
        ADC1->CR2 |= 0x40000000;        /* start a conversion */
 8000afe:	e7bd      	b.n	8000a7c <main+0x1c>
 8000b00:	00000000 	.word	0x00000000
 8000b04:	40affe00 	.word	0x40affe00
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	4074a000 	.word	0x4074a000
 8000b10:	080016fc 	.word	0x080016fc
 8000b14:	40012000 	.word	0x40012000
 8000b18:	08001718 	.word	0x08001718
 8000b1c:	08001728 	.word	0x08001728
 8000b20:	0800172c 	.word	0x0800172c

08000b24 <ADC1_init>:
    }
}

void ADC1_init()
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
    /* set up pin PC0 for analog input */
    RCC->AHB1ENR |=  4;	            /* enable GPIOC clock */
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <ADC1_init+0x50>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <ADC1_init+0x50>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOC->MODER |=  3;             /* PC0 analog */
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <ADC1_init+0x54>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <ADC1_init+0x54>)
 8000b3a:	f043 0303 	orr.w	r3, r3, #3
 8000b3e:	6013      	str	r3, [r2, #0]

    /* setup ADC1 */
    RCC->APB2ENR |= 0x00000100;     /* enable ADC1 clock */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <ADC1_init+0x50>)
 8000b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <ADC1_init+0x50>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	6453      	str	r3, [r2, #68]	; 0x44
    ADC1->CR2 = 0;                  /* SW trigger */
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <ADC1_init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 10;                /* single conversion ch 10 */
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <ADC1_init+0x58>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	635a      	str	r2, [r3, #52]	; 0x34
    ADC1->SQR1 = 0;                 /* conversion sequence length 1 */
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <ADC1_init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	62da      	str	r2, [r3, #44]	; 0x2c
    ADC1->CR2 |= 1;                 /* enable ADC1 */
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <ADC1_init+0x58>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <ADC1_init+0x58>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6093      	str	r3, [r2, #8]

}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	40012000 	.word	0x40012000

08000b80 <USART2_init>:

/* initialize USART2 to transmit at 9600 Baud */
void USART2_init (void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;          /* Enable GPIOA clock */
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <USART2_init+0x84>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <USART2_init+0x84>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= 0x20000;    /* Enable USART2 clock */
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <USART2_init+0x84>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <USART2_init+0x84>)
 8000b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Configure PA2 for USART2_TX */
    GPIOA->AFR[0] |= 0x0700;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <USART2_init+0x88>)
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <USART2_init+0x88>)
 8000ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ba6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= 0x7000;   /* alt7 for USART2 */
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <USART2_init+0x88>)
 8000baa:	6a1b      	ldr	r3, [r3, #32]
 8000bac:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <USART2_init+0x88>)
 8000bae:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000bb2:	6213      	str	r3, [r2, #32]
    GPIOA->MODER  |=  0x0080;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <USART2_init+0x88>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <USART2_init+0x88>)
 8000bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbe:	6013      	str	r3, [r2, #0]
    GPIOA->MODER  |=  0x0020;   /* enable alternate function for PA2 */
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <USART2_init+0x88>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <USART2_init+0x88>)
 8000bc6:	f043 0320 	orr.w	r3, r3, #32
 8000bca:	6013      	str	r3, [r2, #0]

    USART2->CR1 = 0x00;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <USART2_init+0x8c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
    USART2->CR1 |= 0x2000;      // UE=1... EN USART
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <USART2_init+0x8c>)
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <USART2_init+0x8c>)
 8000bd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bdc:	60d3      	str	r3, [r2, #12]
    USART2->BRR = 0x0683;       /* 9600 baud @ 16 MHz */
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <USART2_init+0x8c>)
 8000be0:	f240 6283 	movw	r2, #1667	; 0x683
 8000be4:	609a      	str	r2, [r3, #8]
    USART2->CR1 = 0x000C;       /* enable Tx, Rx, 8-bit data */
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <USART2_init+0x8c>)
 8000be8:	220c      	movs	r2, #12
 8000bea:	60da      	str	r2, [r3, #12]
    USART2->CR2 = 0x0000;       /* 1 stop bit */
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <USART2_init+0x8c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
    USART2->CR3 = 0x0000;       /* no flow control */
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <USART2_init+0x8c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]

}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40004400 	.word	0x40004400

08000c10 <USART2_write>:
/* Write a character to USART2 */
int USART2_write (int ch)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    while (!(USART2->SR & 0x0080)) {}   // wait until Tx buffer empty
 8000c18:	bf00      	nop
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <USART2_write+0x2c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f9      	beq.n	8000c1a <USART2_write+0xa>
    USART2->DR = ch;
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <USART2_write+0x2c>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6053      	str	r3, [r2, #4]
    return ch;
 8000c2c:	687b      	ldr	r3, [r7, #4]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400

08000c40 <UART2_SendString>:
    while (!(USART2->SR & 0x0020)) {}   // wait until char arrives
    return USART2->DR;
}

void UART2_SendString(char *string)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	while(*string) USART2_write(*string++);
 8000c48:	e006      	b.n	8000c58 <UART2_SendString+0x18>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffdc 	bl	8000c10 <USART2_write>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1f4      	bne.n	8000c4a <UART2_SendString+0xa>
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <usart2_sendInt>:

/* The function sends a number through USART1 */
void usart2_sendInt(unsigned int i)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	char str[10];
	sprintf(str,"%d",i);
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4906      	ldr	r1, [pc, #24]	; (8000c94 <usart2_sendInt+0x28>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f903 	bl	8000e88 <siprintf>

	UART2_SendString(str);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ffda 	bl	8000c40 <UART2_SendString>
}
 8000c8c:	bf00      	nop
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	0800173c 	.word	0x0800173c

08000c98 <delayMs>:

/* 16 MHz SYSCLK */
void delayMs(int n)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 8000ca0:	e00d      	b.n	8000cbe <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	e002      	b.n	8000cae <delayMs+0x16>
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3301      	adds	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	ddf7      	ble.n	8000ca8 <delayMs+0x10>
    for (; n > 0; n--)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dcee      	bgt.n	8000ca2 <delayMs+0xa>
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <HardFault_Handler+0x4>

08000cde <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <MemManage_Handler+0x4>

08000ce4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <BusFault_Handler+0x4>

08000cea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <UsageFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1e:	f000 f875 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f000 f86c 	bl	8000e34 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20018000 	.word	0x20018000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000084 	.word	0x20000084
 8000d90:	200000a8 	.word	0x200000a8

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f000 f82b 	bl	8000e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fe39 	bl	8000a60 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dfc:	0800177c 	.word	0x0800177c
  ldr r2, =_sbss
 8000e00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e04:	200000a4 	.word	0x200000a4

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000090 	.word	0x20000090

08000e34 <__errno>:
 8000e34:	4b01      	ldr	r3, [pc, #4]	; (8000e3c <__errno+0x8>)
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000004 	.word	0x20000004

08000e40 <__libc_init_array>:
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	4d0d      	ldr	r5, [pc, #52]	; (8000e78 <__libc_init_array+0x38>)
 8000e44:	4c0d      	ldr	r4, [pc, #52]	; (8000e7c <__libc_init_array+0x3c>)
 8000e46:	1b64      	subs	r4, r4, r5
 8000e48:	10a4      	asrs	r4, r4, #2
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	42a6      	cmp	r6, r4
 8000e4e:	d109      	bne.n	8000e64 <__libc_init_array+0x24>
 8000e50:	4d0b      	ldr	r5, [pc, #44]	; (8000e80 <__libc_init_array+0x40>)
 8000e52:	4c0c      	ldr	r4, [pc, #48]	; (8000e84 <__libc_init_array+0x44>)
 8000e54:	f000 fc46 	bl	80016e4 <_init>
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	10a4      	asrs	r4, r4, #2
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	42a6      	cmp	r6, r4
 8000e60:	d105      	bne.n	8000e6e <__libc_init_array+0x2e>
 8000e62:	bd70      	pop	{r4, r5, r6, pc}
 8000e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e68:	4798      	blx	r3
 8000e6a:	3601      	adds	r6, #1
 8000e6c:	e7ee      	b.n	8000e4c <__libc_init_array+0xc>
 8000e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e72:	4798      	blx	r3
 8000e74:	3601      	adds	r6, #1
 8000e76:	e7f2      	b.n	8000e5e <__libc_init_array+0x1e>
 8000e78:	08001774 	.word	0x08001774
 8000e7c:	08001774 	.word	0x08001774
 8000e80:	08001774 	.word	0x08001774
 8000e84:	08001778 	.word	0x08001778

08000e88 <siprintf>:
 8000e88:	b40e      	push	{r1, r2, r3}
 8000e8a:	b500      	push	{lr}
 8000e8c:	b09c      	sub	sp, #112	; 0x70
 8000e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8000e90:	9002      	str	r0, [sp, #8]
 8000e92:	9006      	str	r0, [sp, #24]
 8000e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <siprintf+0x38>)
 8000e9a:	9107      	str	r1, [sp, #28]
 8000e9c:	9104      	str	r1, [sp, #16]
 8000e9e:	4909      	ldr	r1, [pc, #36]	; (8000ec4 <siprintf+0x3c>)
 8000ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ea4:	9105      	str	r1, [sp, #20]
 8000ea6:	6800      	ldr	r0, [r0, #0]
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	a902      	add	r1, sp, #8
 8000eac:	f000 f868 	bl	8000f80 <_svfiprintf_r>
 8000eb0:	9b02      	ldr	r3, [sp, #8]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	b01c      	add	sp, #112	; 0x70
 8000eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ebc:	b003      	add	sp, #12
 8000ebe:	4770      	bx	lr
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	ffff0208 	.word	0xffff0208

08000ec8 <__ssputs_r>:
 8000ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ecc:	688e      	ldr	r6, [r1, #8]
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	4682      	mov	sl, r0
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	4690      	mov	r8, r2
 8000ed6:	461f      	mov	r7, r3
 8000ed8:	d838      	bhi.n	8000f4c <__ssputs_r+0x84>
 8000eda:	898a      	ldrh	r2, [r1, #12]
 8000edc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000ee0:	d032      	beq.n	8000f48 <__ssputs_r+0x80>
 8000ee2:	6825      	ldr	r5, [r4, #0]
 8000ee4:	6909      	ldr	r1, [r1, #16]
 8000ee6:	eba5 0901 	sub.w	r9, r5, r1
 8000eea:	6965      	ldr	r5, [r4, #20]
 8000eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	444b      	add	r3, r9
 8000ef8:	106d      	asrs	r5, r5, #1
 8000efa:	429d      	cmp	r5, r3
 8000efc:	bf38      	it	cc
 8000efe:	461d      	movcc	r5, r3
 8000f00:	0553      	lsls	r3, r2, #21
 8000f02:	d531      	bpl.n	8000f68 <__ssputs_r+0xa0>
 8000f04:	4629      	mov	r1, r5
 8000f06:	f000 fb47 	bl	8001598 <_malloc_r>
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	b950      	cbnz	r0, 8000f24 <__ssputs_r+0x5c>
 8000f0e:	230c      	movs	r3, #12
 8000f10:	f8ca 3000 	str.w	r3, [sl]
 8000f14:	89a3      	ldrh	r3, [r4, #12]
 8000f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1a:	81a3      	strh	r3, [r4, #12]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f24:	6921      	ldr	r1, [r4, #16]
 8000f26:	464a      	mov	r2, r9
 8000f28:	f000 fabe 	bl	80014a8 <memcpy>
 8000f2c:	89a3      	ldrh	r3, [r4, #12]
 8000f2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f36:	81a3      	strh	r3, [r4, #12]
 8000f38:	6126      	str	r6, [r4, #16]
 8000f3a:	6165      	str	r5, [r4, #20]
 8000f3c:	444e      	add	r6, r9
 8000f3e:	eba5 0509 	sub.w	r5, r5, r9
 8000f42:	6026      	str	r6, [r4, #0]
 8000f44:	60a5      	str	r5, [r4, #8]
 8000f46:	463e      	mov	r6, r7
 8000f48:	42be      	cmp	r6, r7
 8000f4a:	d900      	bls.n	8000f4e <__ssputs_r+0x86>
 8000f4c:	463e      	mov	r6, r7
 8000f4e:	4632      	mov	r2, r6
 8000f50:	6820      	ldr	r0, [r4, #0]
 8000f52:	4641      	mov	r1, r8
 8000f54:	f000 fab6 	bl	80014c4 <memmove>
 8000f58:	68a3      	ldr	r3, [r4, #8]
 8000f5a:	6822      	ldr	r2, [r4, #0]
 8000f5c:	1b9b      	subs	r3, r3, r6
 8000f5e:	4432      	add	r2, r6
 8000f60:	60a3      	str	r3, [r4, #8]
 8000f62:	6022      	str	r2, [r4, #0]
 8000f64:	2000      	movs	r0, #0
 8000f66:	e7db      	b.n	8000f20 <__ssputs_r+0x58>
 8000f68:	462a      	mov	r2, r5
 8000f6a:	f000 fb6f 	bl	800164c <_realloc_r>
 8000f6e:	4606      	mov	r6, r0
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d1e1      	bne.n	8000f38 <__ssputs_r+0x70>
 8000f74:	6921      	ldr	r1, [r4, #16]
 8000f76:	4650      	mov	r0, sl
 8000f78:	f000 fabe 	bl	80014f8 <_free_r>
 8000f7c:	e7c7      	b.n	8000f0e <__ssputs_r+0x46>
	...

08000f80 <_svfiprintf_r>:
 8000f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f84:	4698      	mov	r8, r3
 8000f86:	898b      	ldrh	r3, [r1, #12]
 8000f88:	061b      	lsls	r3, r3, #24
 8000f8a:	b09d      	sub	sp, #116	; 0x74
 8000f8c:	4607      	mov	r7, r0
 8000f8e:	460d      	mov	r5, r1
 8000f90:	4614      	mov	r4, r2
 8000f92:	d50e      	bpl.n	8000fb2 <_svfiprintf_r+0x32>
 8000f94:	690b      	ldr	r3, [r1, #16]
 8000f96:	b963      	cbnz	r3, 8000fb2 <_svfiprintf_r+0x32>
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	f000 fafd 	bl	8001598 <_malloc_r>
 8000f9e:	6028      	str	r0, [r5, #0]
 8000fa0:	6128      	str	r0, [r5, #16]
 8000fa2:	b920      	cbnz	r0, 8000fae <_svfiprintf_r+0x2e>
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	e0d1      	b.n	8001152 <_svfiprintf_r+0x1d2>
 8000fae:	2340      	movs	r3, #64	; 0x40
 8000fb0:	616b      	str	r3, [r5, #20]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fc0:	2330      	movs	r3, #48	; 0x30
 8000fc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800116c <_svfiprintf_r+0x1ec>
 8000fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fca:	f04f 0901 	mov.w	r9, #1
 8000fce:	4623      	mov	r3, r4
 8000fd0:	469a      	mov	sl, r3
 8000fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fd6:	b10a      	cbz	r2, 8000fdc <_svfiprintf_r+0x5c>
 8000fd8:	2a25      	cmp	r2, #37	; 0x25
 8000fda:	d1f9      	bne.n	8000fd0 <_svfiprintf_r+0x50>
 8000fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8000fe0:	d00b      	beq.n	8000ffa <_svfiprintf_r+0x7a>
 8000fe2:	465b      	mov	r3, fp
 8000fe4:	4622      	mov	r2, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	4638      	mov	r0, r7
 8000fea:	f7ff ff6d 	bl	8000ec8 <__ssputs_r>
 8000fee:	3001      	adds	r0, #1
 8000ff0:	f000 80aa 	beq.w	8001148 <_svfiprintf_r+0x1c8>
 8000ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ff6:	445a      	add	r2, fp
 8000ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8000ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80a2 	beq.w	8001148 <_svfiprintf_r+0x1c8>
 8001004:	2300      	movs	r3, #0
 8001006:	f04f 32ff 	mov.w	r2, #4294967295
 800100a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800100e:	f10a 0a01 	add.w	sl, sl, #1
 8001012:	9304      	str	r3, [sp, #16]
 8001014:	9307      	str	r3, [sp, #28]
 8001016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800101a:	931a      	str	r3, [sp, #104]	; 0x68
 800101c:	4654      	mov	r4, sl
 800101e:	2205      	movs	r2, #5
 8001020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001024:	4851      	ldr	r0, [pc, #324]	; (800116c <_svfiprintf_r+0x1ec>)
 8001026:	f7ff f8db 	bl	80001e0 <memchr>
 800102a:	9a04      	ldr	r2, [sp, #16]
 800102c:	b9d8      	cbnz	r0, 8001066 <_svfiprintf_r+0xe6>
 800102e:	06d0      	lsls	r0, r2, #27
 8001030:	bf44      	itt	mi
 8001032:	2320      	movmi	r3, #32
 8001034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001038:	0711      	lsls	r1, r2, #28
 800103a:	bf44      	itt	mi
 800103c:	232b      	movmi	r3, #43	; 0x2b
 800103e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001042:	f89a 3000 	ldrb.w	r3, [sl]
 8001046:	2b2a      	cmp	r3, #42	; 0x2a
 8001048:	d015      	beq.n	8001076 <_svfiprintf_r+0xf6>
 800104a:	9a07      	ldr	r2, [sp, #28]
 800104c:	4654      	mov	r4, sl
 800104e:	2000      	movs	r0, #0
 8001050:	f04f 0c0a 	mov.w	ip, #10
 8001054:	4621      	mov	r1, r4
 8001056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800105a:	3b30      	subs	r3, #48	; 0x30
 800105c:	2b09      	cmp	r3, #9
 800105e:	d94e      	bls.n	80010fe <_svfiprintf_r+0x17e>
 8001060:	b1b0      	cbz	r0, 8001090 <_svfiprintf_r+0x110>
 8001062:	9207      	str	r2, [sp, #28]
 8001064:	e014      	b.n	8001090 <_svfiprintf_r+0x110>
 8001066:	eba0 0308 	sub.w	r3, r0, r8
 800106a:	fa09 f303 	lsl.w	r3, r9, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	9304      	str	r3, [sp, #16]
 8001072:	46a2      	mov	sl, r4
 8001074:	e7d2      	b.n	800101c <_svfiprintf_r+0x9c>
 8001076:	9b03      	ldr	r3, [sp, #12]
 8001078:	1d19      	adds	r1, r3, #4
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	9103      	str	r1, [sp, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	bfbb      	ittet	lt
 8001082:	425b      	neglt	r3, r3
 8001084:	f042 0202 	orrlt.w	r2, r2, #2
 8001088:	9307      	strge	r3, [sp, #28]
 800108a:	9307      	strlt	r3, [sp, #28]
 800108c:	bfb8      	it	lt
 800108e:	9204      	strlt	r2, [sp, #16]
 8001090:	7823      	ldrb	r3, [r4, #0]
 8001092:	2b2e      	cmp	r3, #46	; 0x2e
 8001094:	d10c      	bne.n	80010b0 <_svfiprintf_r+0x130>
 8001096:	7863      	ldrb	r3, [r4, #1]
 8001098:	2b2a      	cmp	r3, #42	; 0x2a
 800109a:	d135      	bne.n	8001108 <_svfiprintf_r+0x188>
 800109c:	9b03      	ldr	r3, [sp, #12]
 800109e:	1d1a      	adds	r2, r3, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	9203      	str	r2, [sp, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80010ac:	3402      	adds	r4, #2
 80010ae:	9305      	str	r3, [sp, #20]
 80010b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800117c <_svfiprintf_r+0x1fc>
 80010b4:	7821      	ldrb	r1, [r4, #0]
 80010b6:	2203      	movs	r2, #3
 80010b8:	4650      	mov	r0, sl
 80010ba:	f7ff f891 	bl	80001e0 <memchr>
 80010be:	b140      	cbz	r0, 80010d2 <_svfiprintf_r+0x152>
 80010c0:	2340      	movs	r3, #64	; 0x40
 80010c2:	eba0 000a 	sub.w	r0, r0, sl
 80010c6:	fa03 f000 	lsl.w	r0, r3, r0
 80010ca:	9b04      	ldr	r3, [sp, #16]
 80010cc:	4303      	orrs	r3, r0
 80010ce:	3401      	adds	r4, #1
 80010d0:	9304      	str	r3, [sp, #16]
 80010d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010d6:	4826      	ldr	r0, [pc, #152]	; (8001170 <_svfiprintf_r+0x1f0>)
 80010d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010dc:	2206      	movs	r2, #6
 80010de:	f7ff f87f 	bl	80001e0 <memchr>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d038      	beq.n	8001158 <_svfiprintf_r+0x1d8>
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <_svfiprintf_r+0x1f4>)
 80010e8:	bb1b      	cbnz	r3, 8001132 <_svfiprintf_r+0x1b2>
 80010ea:	9b03      	ldr	r3, [sp, #12]
 80010ec:	3307      	adds	r3, #7
 80010ee:	f023 0307 	bic.w	r3, r3, #7
 80010f2:	3308      	adds	r3, #8
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010f8:	4433      	add	r3, r6
 80010fa:	9309      	str	r3, [sp, #36]	; 0x24
 80010fc:	e767      	b.n	8000fce <_svfiprintf_r+0x4e>
 80010fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8001102:	460c      	mov	r4, r1
 8001104:	2001      	movs	r0, #1
 8001106:	e7a5      	b.n	8001054 <_svfiprintf_r+0xd4>
 8001108:	2300      	movs	r3, #0
 800110a:	3401      	adds	r4, #1
 800110c:	9305      	str	r3, [sp, #20]
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 0c0a 	mov.w	ip, #10
 8001114:	4620      	mov	r0, r4
 8001116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800111a:	3a30      	subs	r2, #48	; 0x30
 800111c:	2a09      	cmp	r2, #9
 800111e:	d903      	bls.n	8001128 <_svfiprintf_r+0x1a8>
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0c5      	beq.n	80010b0 <_svfiprintf_r+0x130>
 8001124:	9105      	str	r1, [sp, #20]
 8001126:	e7c3      	b.n	80010b0 <_svfiprintf_r+0x130>
 8001128:	fb0c 2101 	mla	r1, ip, r1, r2
 800112c:	4604      	mov	r4, r0
 800112e:	2301      	movs	r3, #1
 8001130:	e7f0      	b.n	8001114 <_svfiprintf_r+0x194>
 8001132:	ab03      	add	r3, sp, #12
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	462a      	mov	r2, r5
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <_svfiprintf_r+0x1f8>)
 800113a:	a904      	add	r1, sp, #16
 800113c:	4638      	mov	r0, r7
 800113e:	f3af 8000 	nop.w
 8001142:	1c42      	adds	r2, r0, #1
 8001144:	4606      	mov	r6, r0
 8001146:	d1d6      	bne.n	80010f6 <_svfiprintf_r+0x176>
 8001148:	89ab      	ldrh	r3, [r5, #12]
 800114a:	065b      	lsls	r3, r3, #25
 800114c:	f53f af2c 	bmi.w	8000fa8 <_svfiprintf_r+0x28>
 8001150:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001152:	b01d      	add	sp, #116	; 0x74
 8001154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001158:	ab03      	add	r3, sp, #12
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	462a      	mov	r2, r5
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <_svfiprintf_r+0x1f8>)
 8001160:	a904      	add	r1, sp, #16
 8001162:	4638      	mov	r0, r7
 8001164:	f000 f87a 	bl	800125c <_printf_i>
 8001168:	e7eb      	b.n	8001142 <_svfiprintf_r+0x1c2>
 800116a:	bf00      	nop
 800116c:	0800173f 	.word	0x0800173f
 8001170:	08001749 	.word	0x08001749
 8001174:	00000000 	.word	0x00000000
 8001178:	08000ec9 	.word	0x08000ec9
 800117c:	08001745 	.word	0x08001745

08001180 <_printf_common>:
 8001180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001184:	4616      	mov	r6, r2
 8001186:	4699      	mov	r9, r3
 8001188:	688a      	ldr	r2, [r1, #8]
 800118a:	690b      	ldr	r3, [r1, #16]
 800118c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001190:	4293      	cmp	r3, r2
 8001192:	bfb8      	it	lt
 8001194:	4613      	movlt	r3, r2
 8001196:	6033      	str	r3, [r6, #0]
 8001198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800119c:	4607      	mov	r7, r0
 800119e:	460c      	mov	r4, r1
 80011a0:	b10a      	cbz	r2, 80011a6 <_printf_common+0x26>
 80011a2:	3301      	adds	r3, #1
 80011a4:	6033      	str	r3, [r6, #0]
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	0699      	lsls	r1, r3, #26
 80011aa:	bf42      	ittt	mi
 80011ac:	6833      	ldrmi	r3, [r6, #0]
 80011ae:	3302      	addmi	r3, #2
 80011b0:	6033      	strmi	r3, [r6, #0]
 80011b2:	6825      	ldr	r5, [r4, #0]
 80011b4:	f015 0506 	ands.w	r5, r5, #6
 80011b8:	d106      	bne.n	80011c8 <_printf_common+0x48>
 80011ba:	f104 0a19 	add.w	sl, r4, #25
 80011be:	68e3      	ldr	r3, [r4, #12]
 80011c0:	6832      	ldr	r2, [r6, #0]
 80011c2:	1a9b      	subs	r3, r3, r2
 80011c4:	42ab      	cmp	r3, r5
 80011c6:	dc26      	bgt.n	8001216 <_printf_common+0x96>
 80011c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011cc:	1e13      	subs	r3, r2, #0
 80011ce:	6822      	ldr	r2, [r4, #0]
 80011d0:	bf18      	it	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	0692      	lsls	r2, r2, #26
 80011d6:	d42b      	bmi.n	8001230 <_printf_common+0xb0>
 80011d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011dc:	4649      	mov	r1, r9
 80011de:	4638      	mov	r0, r7
 80011e0:	47c0      	blx	r8
 80011e2:	3001      	adds	r0, #1
 80011e4:	d01e      	beq.n	8001224 <_printf_common+0xa4>
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	68e5      	ldr	r5, [r4, #12]
 80011ea:	6832      	ldr	r2, [r6, #0]
 80011ec:	f003 0306 	and.w	r3, r3, #6
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	bf08      	it	eq
 80011f4:	1aad      	subeq	r5, r5, r2
 80011f6:	68a3      	ldr	r3, [r4, #8]
 80011f8:	6922      	ldr	r2, [r4, #16]
 80011fa:	bf0c      	ite	eq
 80011fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001200:	2500      	movne	r5, #0
 8001202:	4293      	cmp	r3, r2
 8001204:	bfc4      	itt	gt
 8001206:	1a9b      	subgt	r3, r3, r2
 8001208:	18ed      	addgt	r5, r5, r3
 800120a:	2600      	movs	r6, #0
 800120c:	341a      	adds	r4, #26
 800120e:	42b5      	cmp	r5, r6
 8001210:	d11a      	bne.n	8001248 <_printf_common+0xc8>
 8001212:	2000      	movs	r0, #0
 8001214:	e008      	b.n	8001228 <_printf_common+0xa8>
 8001216:	2301      	movs	r3, #1
 8001218:	4652      	mov	r2, sl
 800121a:	4649      	mov	r1, r9
 800121c:	4638      	mov	r0, r7
 800121e:	47c0      	blx	r8
 8001220:	3001      	adds	r0, #1
 8001222:	d103      	bne.n	800122c <_printf_common+0xac>
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122c:	3501      	adds	r5, #1
 800122e:	e7c6      	b.n	80011be <_printf_common+0x3e>
 8001230:	18e1      	adds	r1, r4, r3
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	2030      	movs	r0, #48	; 0x30
 8001236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800123a:	4422      	add	r2, r4
 800123c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001244:	3302      	adds	r3, #2
 8001246:	e7c7      	b.n	80011d8 <_printf_common+0x58>
 8001248:	2301      	movs	r3, #1
 800124a:	4622      	mov	r2, r4
 800124c:	4649      	mov	r1, r9
 800124e:	4638      	mov	r0, r7
 8001250:	47c0      	blx	r8
 8001252:	3001      	adds	r0, #1
 8001254:	d0e6      	beq.n	8001224 <_printf_common+0xa4>
 8001256:	3601      	adds	r6, #1
 8001258:	e7d9      	b.n	800120e <_printf_common+0x8e>
	...

0800125c <_printf_i>:
 800125c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001260:	460c      	mov	r4, r1
 8001262:	4691      	mov	r9, r2
 8001264:	7e27      	ldrb	r7, [r4, #24]
 8001266:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001268:	2f78      	cmp	r7, #120	; 0x78
 800126a:	4680      	mov	r8, r0
 800126c:	469a      	mov	sl, r3
 800126e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001272:	d807      	bhi.n	8001284 <_printf_i+0x28>
 8001274:	2f62      	cmp	r7, #98	; 0x62
 8001276:	d80a      	bhi.n	800128e <_printf_i+0x32>
 8001278:	2f00      	cmp	r7, #0
 800127a:	f000 80d8 	beq.w	800142e <_printf_i+0x1d2>
 800127e:	2f58      	cmp	r7, #88	; 0x58
 8001280:	f000 80a3 	beq.w	80013ca <_printf_i+0x16e>
 8001284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800128c:	e03a      	b.n	8001304 <_printf_i+0xa8>
 800128e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001292:	2b15      	cmp	r3, #21
 8001294:	d8f6      	bhi.n	8001284 <_printf_i+0x28>
 8001296:	a001      	add	r0, pc, #4	; (adr r0, 800129c <_printf_i+0x40>)
 8001298:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800129c:	080012f5 	.word	0x080012f5
 80012a0:	08001309 	.word	0x08001309
 80012a4:	08001285 	.word	0x08001285
 80012a8:	08001285 	.word	0x08001285
 80012ac:	08001285 	.word	0x08001285
 80012b0:	08001285 	.word	0x08001285
 80012b4:	08001309 	.word	0x08001309
 80012b8:	08001285 	.word	0x08001285
 80012bc:	08001285 	.word	0x08001285
 80012c0:	08001285 	.word	0x08001285
 80012c4:	08001285 	.word	0x08001285
 80012c8:	08001415 	.word	0x08001415
 80012cc:	08001339 	.word	0x08001339
 80012d0:	080013f7 	.word	0x080013f7
 80012d4:	08001285 	.word	0x08001285
 80012d8:	08001285 	.word	0x08001285
 80012dc:	08001437 	.word	0x08001437
 80012e0:	08001285 	.word	0x08001285
 80012e4:	08001339 	.word	0x08001339
 80012e8:	08001285 	.word	0x08001285
 80012ec:	08001285 	.word	0x08001285
 80012f0:	080013ff 	.word	0x080013ff
 80012f4:	680b      	ldr	r3, [r1, #0]
 80012f6:	1d1a      	adds	r2, r3, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	600a      	str	r2, [r1, #0]
 80012fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001304:	2301      	movs	r3, #1
 8001306:	e0a3      	b.n	8001450 <_printf_i+0x1f4>
 8001308:	6825      	ldr	r5, [r4, #0]
 800130a:	6808      	ldr	r0, [r1, #0]
 800130c:	062e      	lsls	r6, r5, #24
 800130e:	f100 0304 	add.w	r3, r0, #4
 8001312:	d50a      	bpl.n	800132a <_printf_i+0xce>
 8001314:	6805      	ldr	r5, [r0, #0]
 8001316:	600b      	str	r3, [r1, #0]
 8001318:	2d00      	cmp	r5, #0
 800131a:	da03      	bge.n	8001324 <_printf_i+0xc8>
 800131c:	232d      	movs	r3, #45	; 0x2d
 800131e:	426d      	negs	r5, r5
 8001320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001324:	485e      	ldr	r0, [pc, #376]	; (80014a0 <_printf_i+0x244>)
 8001326:	230a      	movs	r3, #10
 8001328:	e019      	b.n	800135e <_printf_i+0x102>
 800132a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800132e:	6805      	ldr	r5, [r0, #0]
 8001330:	600b      	str	r3, [r1, #0]
 8001332:	bf18      	it	ne
 8001334:	b22d      	sxthne	r5, r5
 8001336:	e7ef      	b.n	8001318 <_printf_i+0xbc>
 8001338:	680b      	ldr	r3, [r1, #0]
 800133a:	6825      	ldr	r5, [r4, #0]
 800133c:	1d18      	adds	r0, r3, #4
 800133e:	6008      	str	r0, [r1, #0]
 8001340:	0628      	lsls	r0, r5, #24
 8001342:	d501      	bpl.n	8001348 <_printf_i+0xec>
 8001344:	681d      	ldr	r5, [r3, #0]
 8001346:	e002      	b.n	800134e <_printf_i+0xf2>
 8001348:	0669      	lsls	r1, r5, #25
 800134a:	d5fb      	bpl.n	8001344 <_printf_i+0xe8>
 800134c:	881d      	ldrh	r5, [r3, #0]
 800134e:	4854      	ldr	r0, [pc, #336]	; (80014a0 <_printf_i+0x244>)
 8001350:	2f6f      	cmp	r7, #111	; 0x6f
 8001352:	bf0c      	ite	eq
 8001354:	2308      	moveq	r3, #8
 8001356:	230a      	movne	r3, #10
 8001358:	2100      	movs	r1, #0
 800135a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800135e:	6866      	ldr	r6, [r4, #4]
 8001360:	60a6      	str	r6, [r4, #8]
 8001362:	2e00      	cmp	r6, #0
 8001364:	bfa2      	ittt	ge
 8001366:	6821      	ldrge	r1, [r4, #0]
 8001368:	f021 0104 	bicge.w	r1, r1, #4
 800136c:	6021      	strge	r1, [r4, #0]
 800136e:	b90d      	cbnz	r5, 8001374 <_printf_i+0x118>
 8001370:	2e00      	cmp	r6, #0
 8001372:	d04d      	beq.n	8001410 <_printf_i+0x1b4>
 8001374:	4616      	mov	r6, r2
 8001376:	fbb5 f1f3 	udiv	r1, r5, r3
 800137a:	fb03 5711 	mls	r7, r3, r1, r5
 800137e:	5dc7      	ldrb	r7, [r0, r7]
 8001380:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001384:	462f      	mov	r7, r5
 8001386:	42bb      	cmp	r3, r7
 8001388:	460d      	mov	r5, r1
 800138a:	d9f4      	bls.n	8001376 <_printf_i+0x11a>
 800138c:	2b08      	cmp	r3, #8
 800138e:	d10b      	bne.n	80013a8 <_printf_i+0x14c>
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	07df      	lsls	r7, r3, #31
 8001394:	d508      	bpl.n	80013a8 <_printf_i+0x14c>
 8001396:	6923      	ldr	r3, [r4, #16]
 8001398:	6861      	ldr	r1, [r4, #4]
 800139a:	4299      	cmp	r1, r3
 800139c:	bfde      	ittt	le
 800139e:	2330      	movle	r3, #48	; 0x30
 80013a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80013a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80013a8:	1b92      	subs	r2, r2, r6
 80013aa:	6122      	str	r2, [r4, #16]
 80013ac:	f8cd a000 	str.w	sl, [sp]
 80013b0:	464b      	mov	r3, r9
 80013b2:	aa03      	add	r2, sp, #12
 80013b4:	4621      	mov	r1, r4
 80013b6:	4640      	mov	r0, r8
 80013b8:	f7ff fee2 	bl	8001180 <_printf_common>
 80013bc:	3001      	adds	r0, #1
 80013be:	d14c      	bne.n	800145a <_printf_i+0x1fe>
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	b004      	add	sp, #16
 80013c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ca:	4835      	ldr	r0, [pc, #212]	; (80014a0 <_printf_i+0x244>)
 80013cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	680e      	ldr	r6, [r1, #0]
 80013d4:	061f      	lsls	r7, r3, #24
 80013d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80013da:	600e      	str	r6, [r1, #0]
 80013dc:	d514      	bpl.n	8001408 <_printf_i+0x1ac>
 80013de:	07d9      	lsls	r1, r3, #31
 80013e0:	bf44      	itt	mi
 80013e2:	f043 0320 	orrmi.w	r3, r3, #32
 80013e6:	6023      	strmi	r3, [r4, #0]
 80013e8:	b91d      	cbnz	r5, 80013f2 <_printf_i+0x196>
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	f023 0320 	bic.w	r3, r3, #32
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	2310      	movs	r3, #16
 80013f4:	e7b0      	b.n	8001358 <_printf_i+0xfc>
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	f043 0320 	orr.w	r3, r3, #32
 80013fc:	6023      	str	r3, [r4, #0]
 80013fe:	2378      	movs	r3, #120	; 0x78
 8001400:	4828      	ldr	r0, [pc, #160]	; (80014a4 <_printf_i+0x248>)
 8001402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001406:	e7e3      	b.n	80013d0 <_printf_i+0x174>
 8001408:	065e      	lsls	r6, r3, #25
 800140a:	bf48      	it	mi
 800140c:	b2ad      	uxthmi	r5, r5
 800140e:	e7e6      	b.n	80013de <_printf_i+0x182>
 8001410:	4616      	mov	r6, r2
 8001412:	e7bb      	b.n	800138c <_printf_i+0x130>
 8001414:	680b      	ldr	r3, [r1, #0]
 8001416:	6826      	ldr	r6, [r4, #0]
 8001418:	6960      	ldr	r0, [r4, #20]
 800141a:	1d1d      	adds	r5, r3, #4
 800141c:	600d      	str	r5, [r1, #0]
 800141e:	0635      	lsls	r5, r6, #24
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	d501      	bpl.n	8001428 <_printf_i+0x1cc>
 8001424:	6018      	str	r0, [r3, #0]
 8001426:	e002      	b.n	800142e <_printf_i+0x1d2>
 8001428:	0671      	lsls	r1, r6, #25
 800142a:	d5fb      	bpl.n	8001424 <_printf_i+0x1c8>
 800142c:	8018      	strh	r0, [r3, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	6123      	str	r3, [r4, #16]
 8001432:	4616      	mov	r6, r2
 8001434:	e7ba      	b.n	80013ac <_printf_i+0x150>
 8001436:	680b      	ldr	r3, [r1, #0]
 8001438:	1d1a      	adds	r2, r3, #4
 800143a:	600a      	str	r2, [r1, #0]
 800143c:	681e      	ldr	r6, [r3, #0]
 800143e:	6862      	ldr	r2, [r4, #4]
 8001440:	2100      	movs	r1, #0
 8001442:	4630      	mov	r0, r6
 8001444:	f7fe fecc 	bl	80001e0 <memchr>
 8001448:	b108      	cbz	r0, 800144e <_printf_i+0x1f2>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	6060      	str	r0, [r4, #4]
 800144e:	6863      	ldr	r3, [r4, #4]
 8001450:	6123      	str	r3, [r4, #16]
 8001452:	2300      	movs	r3, #0
 8001454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001458:	e7a8      	b.n	80013ac <_printf_i+0x150>
 800145a:	6923      	ldr	r3, [r4, #16]
 800145c:	4632      	mov	r2, r6
 800145e:	4649      	mov	r1, r9
 8001460:	4640      	mov	r0, r8
 8001462:	47d0      	blx	sl
 8001464:	3001      	adds	r0, #1
 8001466:	d0ab      	beq.n	80013c0 <_printf_i+0x164>
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	079b      	lsls	r3, r3, #30
 800146c:	d413      	bmi.n	8001496 <_printf_i+0x23a>
 800146e:	68e0      	ldr	r0, [r4, #12]
 8001470:	9b03      	ldr	r3, [sp, #12]
 8001472:	4298      	cmp	r0, r3
 8001474:	bfb8      	it	lt
 8001476:	4618      	movlt	r0, r3
 8001478:	e7a4      	b.n	80013c4 <_printf_i+0x168>
 800147a:	2301      	movs	r3, #1
 800147c:	4632      	mov	r2, r6
 800147e:	4649      	mov	r1, r9
 8001480:	4640      	mov	r0, r8
 8001482:	47d0      	blx	sl
 8001484:	3001      	adds	r0, #1
 8001486:	d09b      	beq.n	80013c0 <_printf_i+0x164>
 8001488:	3501      	adds	r5, #1
 800148a:	68e3      	ldr	r3, [r4, #12]
 800148c:	9903      	ldr	r1, [sp, #12]
 800148e:	1a5b      	subs	r3, r3, r1
 8001490:	42ab      	cmp	r3, r5
 8001492:	dcf2      	bgt.n	800147a <_printf_i+0x21e>
 8001494:	e7eb      	b.n	800146e <_printf_i+0x212>
 8001496:	2500      	movs	r5, #0
 8001498:	f104 0619 	add.w	r6, r4, #25
 800149c:	e7f5      	b.n	800148a <_printf_i+0x22e>
 800149e:	bf00      	nop
 80014a0:	08001750 	.word	0x08001750
 80014a4:	08001761 	.word	0x08001761

080014a8 <memcpy>:
 80014a8:	440a      	add	r2, r1
 80014aa:	4291      	cmp	r1, r2
 80014ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80014b0:	d100      	bne.n	80014b4 <memcpy+0xc>
 80014b2:	4770      	bx	lr
 80014b4:	b510      	push	{r4, lr}
 80014b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014be:	4291      	cmp	r1, r2
 80014c0:	d1f9      	bne.n	80014b6 <memcpy+0xe>
 80014c2:	bd10      	pop	{r4, pc}

080014c4 <memmove>:
 80014c4:	4288      	cmp	r0, r1
 80014c6:	b510      	push	{r4, lr}
 80014c8:	eb01 0402 	add.w	r4, r1, r2
 80014cc:	d902      	bls.n	80014d4 <memmove+0x10>
 80014ce:	4284      	cmp	r4, r0
 80014d0:	4623      	mov	r3, r4
 80014d2:	d807      	bhi.n	80014e4 <memmove+0x20>
 80014d4:	1e43      	subs	r3, r0, #1
 80014d6:	42a1      	cmp	r1, r4
 80014d8:	d008      	beq.n	80014ec <memmove+0x28>
 80014da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80014de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80014e2:	e7f8      	b.n	80014d6 <memmove+0x12>
 80014e4:	4402      	add	r2, r0
 80014e6:	4601      	mov	r1, r0
 80014e8:	428a      	cmp	r2, r1
 80014ea:	d100      	bne.n	80014ee <memmove+0x2a>
 80014ec:	bd10      	pop	{r4, pc}
 80014ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80014f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80014f6:	e7f7      	b.n	80014e8 <memmove+0x24>

080014f8 <_free_r>:
 80014f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014fa:	2900      	cmp	r1, #0
 80014fc:	d048      	beq.n	8001590 <_free_r+0x98>
 80014fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001502:	9001      	str	r0, [sp, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	f1a1 0404 	sub.w	r4, r1, #4
 800150a:	bfb8      	it	lt
 800150c:	18e4      	addlt	r4, r4, r3
 800150e:	f000 f8d3 	bl	80016b8 <__malloc_lock>
 8001512:	4a20      	ldr	r2, [pc, #128]	; (8001594 <_free_r+0x9c>)
 8001514:	9801      	ldr	r0, [sp, #4]
 8001516:	6813      	ldr	r3, [r2, #0]
 8001518:	4615      	mov	r5, r2
 800151a:	b933      	cbnz	r3, 800152a <_free_r+0x32>
 800151c:	6063      	str	r3, [r4, #4]
 800151e:	6014      	str	r4, [r2, #0]
 8001520:	b003      	add	sp, #12
 8001522:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001526:	f000 b8cd 	b.w	80016c4 <__malloc_unlock>
 800152a:	42a3      	cmp	r3, r4
 800152c:	d90b      	bls.n	8001546 <_free_r+0x4e>
 800152e:	6821      	ldr	r1, [r4, #0]
 8001530:	1862      	adds	r2, r4, r1
 8001532:	4293      	cmp	r3, r2
 8001534:	bf04      	itt	eq
 8001536:	681a      	ldreq	r2, [r3, #0]
 8001538:	685b      	ldreq	r3, [r3, #4]
 800153a:	6063      	str	r3, [r4, #4]
 800153c:	bf04      	itt	eq
 800153e:	1852      	addeq	r2, r2, r1
 8001540:	6022      	streq	r2, [r4, #0]
 8001542:	602c      	str	r4, [r5, #0]
 8001544:	e7ec      	b.n	8001520 <_free_r+0x28>
 8001546:	461a      	mov	r2, r3
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	b10b      	cbz	r3, 8001550 <_free_r+0x58>
 800154c:	42a3      	cmp	r3, r4
 800154e:	d9fa      	bls.n	8001546 <_free_r+0x4e>
 8001550:	6811      	ldr	r1, [r2, #0]
 8001552:	1855      	adds	r5, r2, r1
 8001554:	42a5      	cmp	r5, r4
 8001556:	d10b      	bne.n	8001570 <_free_r+0x78>
 8001558:	6824      	ldr	r4, [r4, #0]
 800155a:	4421      	add	r1, r4
 800155c:	1854      	adds	r4, r2, r1
 800155e:	42a3      	cmp	r3, r4
 8001560:	6011      	str	r1, [r2, #0]
 8001562:	d1dd      	bne.n	8001520 <_free_r+0x28>
 8001564:	681c      	ldr	r4, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	6053      	str	r3, [r2, #4]
 800156a:	4421      	add	r1, r4
 800156c:	6011      	str	r1, [r2, #0]
 800156e:	e7d7      	b.n	8001520 <_free_r+0x28>
 8001570:	d902      	bls.n	8001578 <_free_r+0x80>
 8001572:	230c      	movs	r3, #12
 8001574:	6003      	str	r3, [r0, #0]
 8001576:	e7d3      	b.n	8001520 <_free_r+0x28>
 8001578:	6825      	ldr	r5, [r4, #0]
 800157a:	1961      	adds	r1, r4, r5
 800157c:	428b      	cmp	r3, r1
 800157e:	bf04      	itt	eq
 8001580:	6819      	ldreq	r1, [r3, #0]
 8001582:	685b      	ldreq	r3, [r3, #4]
 8001584:	6063      	str	r3, [r4, #4]
 8001586:	bf04      	itt	eq
 8001588:	1949      	addeq	r1, r1, r5
 800158a:	6021      	streq	r1, [r4, #0]
 800158c:	6054      	str	r4, [r2, #4]
 800158e:	e7c7      	b.n	8001520 <_free_r+0x28>
 8001590:	b003      	add	sp, #12
 8001592:	bd30      	pop	{r4, r5, pc}
 8001594:	20000088 	.word	0x20000088

08001598 <_malloc_r>:
 8001598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159a:	1ccd      	adds	r5, r1, #3
 800159c:	f025 0503 	bic.w	r5, r5, #3
 80015a0:	3508      	adds	r5, #8
 80015a2:	2d0c      	cmp	r5, #12
 80015a4:	bf38      	it	cc
 80015a6:	250c      	movcc	r5, #12
 80015a8:	2d00      	cmp	r5, #0
 80015aa:	4606      	mov	r6, r0
 80015ac:	db01      	blt.n	80015b2 <_malloc_r+0x1a>
 80015ae:	42a9      	cmp	r1, r5
 80015b0:	d903      	bls.n	80015ba <_malloc_r+0x22>
 80015b2:	230c      	movs	r3, #12
 80015b4:	6033      	str	r3, [r6, #0]
 80015b6:	2000      	movs	r0, #0
 80015b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ba:	f000 f87d 	bl	80016b8 <__malloc_lock>
 80015be:	4921      	ldr	r1, [pc, #132]	; (8001644 <_malloc_r+0xac>)
 80015c0:	680a      	ldr	r2, [r1, #0]
 80015c2:	4614      	mov	r4, r2
 80015c4:	b99c      	cbnz	r4, 80015ee <_malloc_r+0x56>
 80015c6:	4f20      	ldr	r7, [pc, #128]	; (8001648 <_malloc_r+0xb0>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b923      	cbnz	r3, 80015d6 <_malloc_r+0x3e>
 80015cc:	4621      	mov	r1, r4
 80015ce:	4630      	mov	r0, r6
 80015d0:	f000 f862 	bl	8001698 <_sbrk_r>
 80015d4:	6038      	str	r0, [r7, #0]
 80015d6:	4629      	mov	r1, r5
 80015d8:	4630      	mov	r0, r6
 80015da:	f000 f85d 	bl	8001698 <_sbrk_r>
 80015de:	1c43      	adds	r3, r0, #1
 80015e0:	d123      	bne.n	800162a <_malloc_r+0x92>
 80015e2:	230c      	movs	r3, #12
 80015e4:	6033      	str	r3, [r6, #0]
 80015e6:	4630      	mov	r0, r6
 80015e8:	f000 f86c 	bl	80016c4 <__malloc_unlock>
 80015ec:	e7e3      	b.n	80015b6 <_malloc_r+0x1e>
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	1b5b      	subs	r3, r3, r5
 80015f2:	d417      	bmi.n	8001624 <_malloc_r+0x8c>
 80015f4:	2b0b      	cmp	r3, #11
 80015f6:	d903      	bls.n	8001600 <_malloc_r+0x68>
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	441c      	add	r4, r3
 80015fc:	6025      	str	r5, [r4, #0]
 80015fe:	e004      	b.n	800160a <_malloc_r+0x72>
 8001600:	6863      	ldr	r3, [r4, #4]
 8001602:	42a2      	cmp	r2, r4
 8001604:	bf0c      	ite	eq
 8001606:	600b      	streq	r3, [r1, #0]
 8001608:	6053      	strne	r3, [r2, #4]
 800160a:	4630      	mov	r0, r6
 800160c:	f000 f85a 	bl	80016c4 <__malloc_unlock>
 8001610:	f104 000b 	add.w	r0, r4, #11
 8001614:	1d23      	adds	r3, r4, #4
 8001616:	f020 0007 	bic.w	r0, r0, #7
 800161a:	1ac2      	subs	r2, r0, r3
 800161c:	d0cc      	beq.n	80015b8 <_malloc_r+0x20>
 800161e:	1a1b      	subs	r3, r3, r0
 8001620:	50a3      	str	r3, [r4, r2]
 8001622:	e7c9      	b.n	80015b8 <_malloc_r+0x20>
 8001624:	4622      	mov	r2, r4
 8001626:	6864      	ldr	r4, [r4, #4]
 8001628:	e7cc      	b.n	80015c4 <_malloc_r+0x2c>
 800162a:	1cc4      	adds	r4, r0, #3
 800162c:	f024 0403 	bic.w	r4, r4, #3
 8001630:	42a0      	cmp	r0, r4
 8001632:	d0e3      	beq.n	80015fc <_malloc_r+0x64>
 8001634:	1a21      	subs	r1, r4, r0
 8001636:	4630      	mov	r0, r6
 8001638:	f000 f82e 	bl	8001698 <_sbrk_r>
 800163c:	3001      	adds	r0, #1
 800163e:	d1dd      	bne.n	80015fc <_malloc_r+0x64>
 8001640:	e7cf      	b.n	80015e2 <_malloc_r+0x4a>
 8001642:	bf00      	nop
 8001644:	20000088 	.word	0x20000088
 8001648:	2000008c 	.word	0x2000008c

0800164c <_realloc_r>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	4607      	mov	r7, r0
 8001650:	4614      	mov	r4, r2
 8001652:	460e      	mov	r6, r1
 8001654:	b921      	cbnz	r1, 8001660 <_realloc_r+0x14>
 8001656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800165a:	4611      	mov	r1, r2
 800165c:	f7ff bf9c 	b.w	8001598 <_malloc_r>
 8001660:	b922      	cbnz	r2, 800166c <_realloc_r+0x20>
 8001662:	f7ff ff49 	bl	80014f8 <_free_r>
 8001666:	4625      	mov	r5, r4
 8001668:	4628      	mov	r0, r5
 800166a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800166c:	f000 f830 	bl	80016d0 <_malloc_usable_size_r>
 8001670:	42a0      	cmp	r0, r4
 8001672:	d20f      	bcs.n	8001694 <_realloc_r+0x48>
 8001674:	4621      	mov	r1, r4
 8001676:	4638      	mov	r0, r7
 8001678:	f7ff ff8e 	bl	8001598 <_malloc_r>
 800167c:	4605      	mov	r5, r0
 800167e:	2800      	cmp	r0, #0
 8001680:	d0f2      	beq.n	8001668 <_realloc_r+0x1c>
 8001682:	4631      	mov	r1, r6
 8001684:	4622      	mov	r2, r4
 8001686:	f7ff ff0f 	bl	80014a8 <memcpy>
 800168a:	4631      	mov	r1, r6
 800168c:	4638      	mov	r0, r7
 800168e:	f7ff ff33 	bl	80014f8 <_free_r>
 8001692:	e7e9      	b.n	8001668 <_realloc_r+0x1c>
 8001694:	4635      	mov	r5, r6
 8001696:	e7e7      	b.n	8001668 <_realloc_r+0x1c>

08001698 <_sbrk_r>:
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	4d06      	ldr	r5, [pc, #24]	; (80016b4 <_sbrk_r+0x1c>)
 800169c:	2300      	movs	r3, #0
 800169e:	4604      	mov	r4, r0
 80016a0:	4608      	mov	r0, r1
 80016a2:	602b      	str	r3, [r5, #0]
 80016a4:	f7ff fb40 	bl	8000d28 <_sbrk>
 80016a8:	1c43      	adds	r3, r0, #1
 80016aa:	d102      	bne.n	80016b2 <_sbrk_r+0x1a>
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	b103      	cbz	r3, 80016b2 <_sbrk_r+0x1a>
 80016b0:	6023      	str	r3, [r4, #0]
 80016b2:	bd38      	pop	{r3, r4, r5, pc}
 80016b4:	20000094 	.word	0x20000094

080016b8 <__malloc_lock>:
 80016b8:	4801      	ldr	r0, [pc, #4]	; (80016c0 <__malloc_lock+0x8>)
 80016ba:	f000 b811 	b.w	80016e0 <__retarget_lock_acquire_recursive>
 80016be:	bf00      	nop
 80016c0:	2000009c 	.word	0x2000009c

080016c4 <__malloc_unlock>:
 80016c4:	4801      	ldr	r0, [pc, #4]	; (80016cc <__malloc_unlock+0x8>)
 80016c6:	f000 b80c 	b.w	80016e2 <__retarget_lock_release_recursive>
 80016ca:	bf00      	nop
 80016cc:	2000009c 	.word	0x2000009c

080016d0 <_malloc_usable_size_r>:
 80016d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016d4:	1f18      	subs	r0, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bfbc      	itt	lt
 80016da:	580b      	ldrlt	r3, [r1, r0]
 80016dc:	18c0      	addlt	r0, r0, r3
 80016de:	4770      	bx	lr

080016e0 <__retarget_lock_acquire_recursive>:
 80016e0:	4770      	bx	lr

080016e2 <__retarget_lock_release_recursive>:
 80016e2:	4770      	bx	lr

080016e4 <_init>:
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e6:	bf00      	nop
 80016e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ea:	bc08      	pop	{r3}
 80016ec:	469e      	mov	lr, r3
 80016ee:	4770      	bx	lr

080016f0 <_fini>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	bf00      	nop
 80016f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f6:	bc08      	pop	{r3}
 80016f8:	469e      	mov	lr, r3
 80016fa:	4770      	bx	lr
