
Timer_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003c0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003c4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003c4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016c5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000541  00000000  00000000  000216f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00021c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00021e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000734  00000000  00000000  00021f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ed0  00000000  00000000  000226ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d43d  00000000  00000000  0002457c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a19b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000524  00000000  00000000  000a1a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003a0 	.word	0x080003a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080003a0 	.word	0x080003a0

080001d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <NMI_Handler+0x4>

080001da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001da:	b480      	push	{r7}
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001de:	e7fe      	b.n	80001de <HardFault_Handler+0x4>

080001e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001e4:	e7fe      	b.n	80001e4 <MemManage_Handler+0x4>

080001e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001e6:	b480      	push	{r7}
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001ea:	e7fe      	b.n	80001ea <BusFault_Handler+0x4>

080001ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <UsageFault_Handler+0x4>

080001f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr

0800020e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800020e:	b480      	push	{r7}
 8000210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000220:	f000 f886 	bl	8000330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}

08000228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <SystemInit+0x20>)
 800022e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000232:	4a05      	ldr	r2, [pc, #20]	; (8000248 <SystemInit+0x20>)
 8000234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <main>:


#include "stm32f4xx.h"

int main(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
    // configure PA5 as output to drive the LED
    RCC->AHB1ENR |=  1;             /* enable GPIOA clock */
 8000250:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <main+0x88>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000254:	4a1f      	ldr	r2, [pc, #124]	; (80002d4 <main+0x88>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER &= ~0x00000C00;    /* clear pin mode */
 800025c:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <main+0x8c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a1d      	ldr	r2, [pc, #116]	; (80002d8 <main+0x8c>)
 8000262:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000266:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000400;    /* set pin to output mode */
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <main+0x8c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a1a      	ldr	r2, [pc, #104]	; (80002d8 <main+0x8c>)
 800026e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000272:	6013      	str	r3, [r2, #0]

    // configure TIM2 to wrap around at 1 Hz
    RCC->APB1ENR |= 1;              /* enable TIM2 clock */
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <main+0x88>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000278:	4a16      	ldr	r2, [pc, #88]	; (80002d4 <main+0x88>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 1600 - 1;           /* divided by 1600 */
 8000280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000284:	f240 623f 	movw	r2, #1599	; 0x63f
 8000288:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 10000 - 1;          /* divided by 10000 */
 800028a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000292:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CNT = 0;                  /* clear timer counter */
 8000294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000298:	2200      	movs	r2, #0
 800029a:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->CR1 = 1;                  /* enable TIM2 */
 800029c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a0:	2201      	movs	r2, #1
 80002a2:	601a      	str	r2, [r3, #0]

    while (1)
    {
        while(!(TIM2->SR & 1)) {}   /* wait until UIF set */
 80002a4:	bf00      	nop
 80002a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002aa:	691b      	ldr	r3, [r3, #16]
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d0f8      	beq.n	80002a6 <main+0x5a>
        TIM2->SR &= ~1;             /* clear UIF */
 80002b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b8:	691b      	ldr	r3, [r3, #16]
 80002ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002be:	f023 0301 	bic.w	r3, r3, #1
 80002c2:	6113      	str	r3, [r2, #16]
        GPIOA->ODR ^= 0x00000020;   /* toggle green LED */
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <main+0x8c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <main+0x8c>)
 80002ca:	f083 0320 	eor.w	r3, r3, #32
 80002ce:	6153      	str	r3, [r2, #20]
        while(!(TIM2->SR & 1)) {}   /* wait until UIF set */
 80002d0:	e7e8      	b.n	80002a4 <main+0x58>
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000

080002dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002e2:	490e      	ldr	r1, [pc, #56]	; (800031c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002f8:	4c0b      	ldr	r4, [pc, #44]	; (8000328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000306:	f7ff ff8f 	bl	8000228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800030a:	f000 f825 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030e:	f7ff ff9d 	bl	800024c <main>
  bx  lr    
 8000312:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000314:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000320:	080003c0 	.word	0x080003c0
  ldr r2, =_sbss
 8000324:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000328:	20000024 	.word	0x20000024

0800032c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <HAL_IncTick+0x20>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	461a      	mov	r2, r3
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <HAL_IncTick+0x24>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4413      	add	r3, r2
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <HAL_IncTick+0x24>)
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000
 8000354:	20000020 	.word	0x20000020

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	4d0d      	ldr	r5, [pc, #52]	; (8000390 <__libc_init_array+0x38>)
 800035c:	4c0d      	ldr	r4, [pc, #52]	; (8000394 <__libc_init_array+0x3c>)
 800035e:	1b64      	subs	r4, r4, r5
 8000360:	10a4      	asrs	r4, r4, #2
 8000362:	2600      	movs	r6, #0
 8000364:	42a6      	cmp	r6, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	4d0b      	ldr	r5, [pc, #44]	; (8000398 <__libc_init_array+0x40>)
 800036a:	4c0c      	ldr	r4, [pc, #48]	; (800039c <__libc_init_array+0x44>)
 800036c:	f000 f818 	bl	80003a0 <_init>
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	10a4      	asrs	r4, r4, #2
 8000374:	2600      	movs	r6, #0
 8000376:	42a6      	cmp	r6, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000380:	4798      	blx	r3
 8000382:	3601      	adds	r6, #1
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	f855 3b04 	ldr.w	r3, [r5], #4
 800038a:	4798      	blx	r3
 800038c:	3601      	adds	r6, #1
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003b8 	.word	0x080003b8
 8000394:	080003b8 	.word	0x080003b8
 8000398:	080003b8 	.word	0x080003b8
 800039c:	080003bc 	.word	0x080003bc

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
