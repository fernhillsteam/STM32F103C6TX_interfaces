
GLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000410  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080005a4  080005a4  000105a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005bc  080005bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005bc  080005bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005bc  080005bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005bc  080005bc  000105bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c0  080005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005c4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005c8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005c8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001774  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000604  00000000  00000000  000217a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00021db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00021fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a71  00000000  00000000  00022168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002013  00000000  00000000  00035bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d4eb  00000000  00000000  00037bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b50d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000640  00000000  00000000  000b512c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800058c 	.word	0x0800058c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800058c 	.word	0x0800058c

080001d4 <main>:
    {0x3e, 0x41, 0x41, 0x41, 0x22, 0},  /* C */
    {0x7f, 0x41, 0x41, 0x22, 0x1c, 0}   /* D */
};

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
    GLCD_init();        /* initialize the GLCD controller */
 80001d8:	f000 f864 	bl	80002a4 <GLCD_init>
    GLCD_clear();       /* clear display and home the cursor */
 80001dc:	f000 f84a 	bl	8000274 <GLCD_clear>

    GLCD_putchar(0);    /* display letter A */
 80001e0:	2000      	movs	r0, #0
 80001e2:	f000 f80b 	bl	80001fc <GLCD_putchar>
    GLCD_putchar(1);    /* display letter B */
 80001e6:	2001      	movs	r0, #1
 80001e8:	f000 f808 	bl	80001fc <GLCD_putchar>
    GLCD_putchar(2);    /* display letter C */
 80001ec:	2002      	movs	r0, #2
 80001ee:	f000 f805 	bl	80001fc <GLCD_putchar>
    GLCD_putchar(3);    /* display letter C */
 80001f2:	2003      	movs	r0, #3
 80001f4:	f000 f802 	bl	80001fc <GLCD_putchar>

    while(1) {
 80001f8:	e7fe      	b.n	80001f8 <main+0x24>
	...

080001fc <GLCD_putchar>:
    }
}

void GLCD_putchar(int c)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < 6; i++)
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	e00f      	b.n	800022a <GLCD_putchar+0x2e>
        GLCD_data_write(font_table[c][i]);
 800020a:	490c      	ldr	r1, [pc, #48]	; (800023c <GLCD_putchar+0x40>)
 800020c:	687a      	ldr	r2, [r7, #4]
 800020e:	4613      	mov	r3, r2
 8000210:	005b      	lsls	r3, r3, #1
 8000212:	4413      	add	r3, r2
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	18ca      	adds	r2, r1, r3
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	4413      	add	r3, r2
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f87a 	bl	8000318 <GLCD_data_write>
    for (i = 0; i < 6; i++)
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3301      	adds	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	2b05      	cmp	r3, #5
 800022e:	ddec      	ble.n	800020a <GLCD_putchar+0xe>
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	080005a4 	.word	0x080005a4

08000240 <GLCD_setCursor>:

void GLCD_setCursor(unsigned char x, unsigned char y)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	460a      	mov	r2, r1
 800024a:	71fb      	strb	r3, [r7, #7]
 800024c:	4613      	mov	r3, r2
 800024e:	71bb      	strb	r3, [r7, #6]
    GLCD_command_write(0x80 | x);  /* column */
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000256:	b2db      	uxtb	r3, r3
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f86f 	bl	800033c <GLCD_command_write>
    GLCD_command_write(0x40 | y);  /* bank (8 pixel rows per bank) */
 800025e:	79bb      	ldrb	r3, [r7, #6]
 8000260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f868 	bl	800033c <GLCD_command_write>
}
 800026c:	bf00      	nop
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <GLCD_clear>:

/* clears the GLCD by writing zeros to the entire screen */
void GLCD_clear(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
    int32_t index;
    for (index = 0 ; index < (GLCD_WIDTH * GLCD_HEIGHT / 8) ; index++)
 800027a:	2300      	movs	r3, #0
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	e005      	b.n	800028c <GLCD_clear+0x18>
        GLCD_data_write(0x00);
 8000280:	2000      	movs	r0, #0
 8000282:	f000 f849 	bl	8000318 <GLCD_data_write>
    for (index = 0 ; index < (GLCD_WIDTH * GLCD_HEIGHT / 8) ; index++)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3301      	adds	r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000292:	dbf5      	blt.n	8000280 <GLCD_clear+0xc>

    GLCD_setCursor(0, 0); /* return to the home position */
 8000294:	2100      	movs	r1, #0
 8000296:	2000      	movs	r0, #0
 8000298:	f7ff ffd2 	bl	8000240 <GLCD_setCursor>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <GLCD_init>:

/* send the initialization commands to PCD8544 GLCD controller */
void GLCD_init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
    SPI_init();
 80002a8:	f000 f85c 	bl	8000364 <SPI_init>

    /* PORTB 6, 10 as GPIO output for GLCD DC and RESET */
    RCC->AHB1ENR |= 2;              /* enable GPIOB clock */
 80002ac:	4b18      	ldr	r3, [pc, #96]	; (8000310 <GLCD_init+0x6c>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a17      	ldr	r2, [pc, #92]	; (8000310 <GLCD_init+0x6c>)
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOB->MODER &= ~0x00303000;    /* clear pin mode */
 80002b8:	4b16      	ldr	r3, [pc, #88]	; (8000314 <GLCD_init+0x70>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a15      	ldr	r2, [pc, #84]	; (8000314 <GLCD_init+0x70>)
 80002be:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80002c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80002c6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  0x00101000;    /* set pin output mode */
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <GLCD_init+0x70>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a11      	ldr	r2, [pc, #68]	; (8000314 <GLCD_init+0x70>)
 80002ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002d6:	6013      	str	r3, [r2, #0]

    /* hardware reset of GLCD controller */
    GPIOB->BSRR = 0x04000000;       /* assert RESET */
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <GLCD_init+0x70>)
 80002da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80002de:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = 0x00000400;       /* deassert RESET */
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <GLCD_init+0x70>)
 80002e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002e6:	619a      	str	r2, [r3, #24]

    GLCD_command_write(0x21);       /* set extended command mode */
 80002e8:	2021      	movs	r0, #33	; 0x21
 80002ea:	f000 f827 	bl	800033c <GLCD_command_write>
    GLCD_command_write(0xB8);       /* set LCD Vop for contrast */
 80002ee:	20b8      	movs	r0, #184	; 0xb8
 80002f0:	f000 f824 	bl	800033c <GLCD_command_write>
    GLCD_command_write(0x04);       /* set temp coefficient */
 80002f4:	2004      	movs	r0, #4
 80002f6:	f000 f821 	bl	800033c <GLCD_command_write>
    GLCD_command_write(0x14);       /* set LCD bias mode 1:48 */
 80002fa:	2014      	movs	r0, #20
 80002fc:	f000 f81e 	bl	800033c <GLCD_command_write>
    GLCD_command_write(0x20);       /* set normal command mode */
 8000300:	2020      	movs	r0, #32
 8000302:	f000 f81b 	bl	800033c <GLCD_command_write>
    GLCD_command_write(0x0C);       /* set display normal mode */
 8000306:	200c      	movs	r0, #12
 8000308:	f000 f818 	bl	800033c <GLCD_command_write>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40023800 	.word	0x40023800
 8000314:	40020400 	.word	0x40020400

08000318 <GLCD_data_write>:

/* write to GLCD controller data register */
void GLCD_data_write(unsigned char data)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = 0x00000040;       /* select data register */
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <GLCD_data_write+0x20>)
 8000324:	2240      	movs	r2, #64	; 0x40
 8000326:	619a      	str	r2, [r3, #24]
    SPI_write(data);                /* send data via SPI */
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 f868 	bl	8000400 <SPI_write>
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40020400 	.word	0x40020400

0800033c <GLCD_command_write>:

/* write to GLCD controller command register */
void GLCD_command_write(unsigned char data)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = 0x00400000;       /* select command register */
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <GLCD_command_write+0x24>)
 8000348:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800034c:	619a      	str	r2, [r3, #24]
    SPI_write(data);                /* send data via SPI */
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f855 	bl	8000400 <SPI_write>
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40020400 	.word	0x40020400

08000364 <SPI_init>:

void SPI_init(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;              /* enable GPIOA clock */
 8000368:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <SPI_init+0x90>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SPI_init+0x90>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= 0x1000;         /* enable SPI1 clock */
 8000374:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <SPI_init+0x90>)
 8000376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000378:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SPI_init+0x90>)
 800037a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037e:	6453      	str	r3, [r2, #68]	; 0x44

    /* PORTA 5, 7 for SPI1 MOSI and SCLK */
    GPIOA->MODER &= ~0x0000CC00;    /* clear pin mode */
 8000380:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <SPI_init+0x94>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <SPI_init+0x94>)
 8000386:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 800038a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00008800;    /* set pin alternate mode */
 800038c:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <SPI_init+0x94>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a19      	ldr	r2, [pc, #100]	; (80003f8 <SPI_init+0x94>)
 8000392:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 8000396:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~0xF0F00000;   /* clear alt mode */
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <SPI_init+0x94>)
 800039a:	6a1b      	ldr	r3, [r3, #32]
 800039c:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <SPI_init+0x94>)
 800039e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80003a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80003a6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  0x50500000;   /* set alt mode SPI1 */
 80003a8:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <SPI_init+0x94>)
 80003aa:	6a1b      	ldr	r3, [r3, #32]
 80003ac:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <SPI_init+0x94>)
 80003ae:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80003b2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80003b6:	6213      	str	r3, [r2, #32]

    /* PORTA 8 as GPIO output for SPI slave select */
    GPIOA->MODER &= ~0x00030000;    /* clear pin mode */
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <SPI_init+0x94>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <SPI_init+0x94>)
 80003be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80003c2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00010000;    /* set pin output mode */
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <SPI_init+0x94>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <SPI_init+0x94>)
 80003ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003ce:	6013      	str	r3, [r2, #0]

    SPI1->CR1 = 0x31C;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <SPI_init+0x98>)
 80003d2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80003d6:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = 0;
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <SPI_init+0x98>)
 80003da:	2200      	movs	r2, #0
 80003dc:	605a      	str	r2, [r3, #4]
    SPI1->CR1 |= 0x40;              /* enable SPI1 module */
 80003de:	4b07      	ldr	r3, [pc, #28]	; (80003fc <SPI_init+0x98>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <SPI_init+0x98>)
 80003e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e8:	6013      	str	r3, [r2, #0]
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40020000 	.word	0x40020000
 80003fc:	40013000 	.word	0x40013000

08000400 <SPI_write>:

void SPI_write(unsigned char data)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
    GPIOA->BSRR = 0x01000000;       /* assert slave select */
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <SPI_write+0x48>)
 800040c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000410:	619a      	str	r2, [r3, #24]
    while (!(SPI1->SR & 2)) {}      /* wait until transfer buffer Empty */
 8000412:	bf00      	nop
 8000414:	4b0d      	ldr	r3, [pc, #52]	; (800044c <SPI_write+0x4c>)
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	f003 0302 	and.w	r3, r3, #2
 800041c:	2b00      	cmp	r3, #0
 800041e:	d0f9      	beq.n	8000414 <SPI_write+0x14>
    SPI1->DR = data;                /* write command and upper 4 bits of data */
 8000420:	4a0a      	ldr	r2, [pc, #40]	; (800044c <SPI_write+0x4c>)
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	60d3      	str	r3, [r2, #12]
    while (SPI1->SR & 0x80) {}      /* wait for transmission done */
 8000426:	bf00      	nop
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <SPI_write+0x4c>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1f9      	bne.n	8000428 <SPI_write+0x28>
    GPIOA->BSRR = 0x00000100;       /* deassert slave select */
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <SPI_write+0x48>)
 8000436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800043a:	619a      	str	r2, [r3, #24]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40020000 	.word	0x40020000
 800044c:	40013000 	.word	0x40013000

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <NMI_Handler+0x4>

08000456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <HardFault_Handler+0x4>

0800045c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <MemManage_Handler+0x4>

08000462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <BusFault_Handler+0x4>

08000468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <UsageFault_Handler+0x4>

0800046e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049c:	f000 f83e 	bl	800051c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <SystemInit+0x20>)
 80004aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ae:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <SystemInit+0x20>)
 80004b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004cc:	480d      	ldr	r0, [pc, #52]	; (8000504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004ce:	490e      	ldr	r1, [pc, #56]	; (8000508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004d0:	4a0e      	ldr	r2, [pc, #56]	; (800050c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d4:	e002      	b.n	80004dc <LoopCopyDataInit>

080004d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004da:	3304      	adds	r3, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e0:	d3f9      	bcc.n	80004d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004e4:	4c0b      	ldr	r4, [pc, #44]	; (8000514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e8:	e001      	b.n	80004ee <LoopFillZerobss>

080004ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ec:	3204      	adds	r2, #4

080004ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f0:	d3fb      	bcc.n	80004ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004f2:	f7ff ffd7 	bl	80004a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004f6:	f000 f825 	bl	8000544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004fa:	f7ff fe6b 	bl	80001d4 <main>
  bx  lr    
 80004fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000500:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800050c:	080005c4 	.word	0x080005c4
  ldr r2, =_sbss
 8000510:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000514:	20000024 	.word	0x20000024

08000518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC_IRQHandler>
	...

0800051c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_IncTick+0x20>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_IncTick+0x24>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <HAL_IncTick+0x24>)
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000
 8000540:	20000020 	.word	0x20000020

08000544 <__libc_init_array>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	4d0d      	ldr	r5, [pc, #52]	; (800057c <__libc_init_array+0x38>)
 8000548:	4c0d      	ldr	r4, [pc, #52]	; (8000580 <__libc_init_array+0x3c>)
 800054a:	1b64      	subs	r4, r4, r5
 800054c:	10a4      	asrs	r4, r4, #2
 800054e:	2600      	movs	r6, #0
 8000550:	42a6      	cmp	r6, r4
 8000552:	d109      	bne.n	8000568 <__libc_init_array+0x24>
 8000554:	4d0b      	ldr	r5, [pc, #44]	; (8000584 <__libc_init_array+0x40>)
 8000556:	4c0c      	ldr	r4, [pc, #48]	; (8000588 <__libc_init_array+0x44>)
 8000558:	f000 f818 	bl	800058c <_init>
 800055c:	1b64      	subs	r4, r4, r5
 800055e:	10a4      	asrs	r4, r4, #2
 8000560:	2600      	movs	r6, #0
 8000562:	42a6      	cmp	r6, r4
 8000564:	d105      	bne.n	8000572 <__libc_init_array+0x2e>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	f855 3b04 	ldr.w	r3, [r5], #4
 800056c:	4798      	blx	r3
 800056e:	3601      	adds	r6, #1
 8000570:	e7ee      	b.n	8000550 <__libc_init_array+0xc>
 8000572:	f855 3b04 	ldr.w	r3, [r5], #4
 8000576:	4798      	blx	r3
 8000578:	3601      	adds	r6, #1
 800057a:	e7f2      	b.n	8000562 <__libc_init_array+0x1e>
 800057c:	080005bc 	.word	0x080005bc
 8000580:	080005bc 	.word	0x080005bc
 8000584:	080005bc 	.word	0x080005bc
 8000588:	080005c0 	.word	0x080005c0

0800058c <_init>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr

08000598 <_fini>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr
