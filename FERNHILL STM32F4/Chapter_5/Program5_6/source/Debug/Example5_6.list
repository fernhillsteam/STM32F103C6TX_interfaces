
Example5_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003cc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003d0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003d0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016c5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000541  00000000  00000000  000216f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00021c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00021e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ada  00000000  00000000  00021f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ec3  00000000  00000000  00035a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da5c  00000000  00000000  00037915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5371  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000524  00000000  00000000  000b53c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003ac 	.word	0x080003ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080003ac 	.word	0x080003ac

080001d4 <main>:
 */

#include "stm32f4xx.h"

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    // configure PA5 as output to drive the LED
    RCC->AHB1ENR |=  1;             /* enable GPIOA clock */
 80001d8:	4b23      	ldr	r3, [pc, #140]	; (8000268 <main+0x94>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001dc:	4a22      	ldr	r2, [pc, #136]	; (8000268 <main+0x94>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER &= ~0x00000C00;    /* clear pin mode */
 80001e4:	4b21      	ldr	r3, [pc, #132]	; (800026c <main+0x98>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a20      	ldr	r2, [pc, #128]	; (800026c <main+0x98>)
 80001ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000800;    /* set pin to alternate function */
 80001f0:	4b1e      	ldr	r3, [pc, #120]	; (800026c <main+0x98>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a1d      	ldr	r2, [pc, #116]	; (800026c <main+0x98>)
 80001f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001fa:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= 0x00F00000;    /* clear pin AF bits */
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <main+0x98>)
 80001fe:	6a1b      	ldr	r3, [r3, #32]
 8000200:	4a1a      	ldr	r2, [pc, #104]	; (800026c <main+0x98>)
 8000202:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8000206:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= 0x00100000;    /* set pin to AF1 for TIM2 CH1 */
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <main+0x98>)
 800020a:	6a1b      	ldr	r3, [r3, #32]
 800020c:	4a17      	ldr	r2, [pc, #92]	; (800026c <main+0x98>)
 800020e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000212:	6213      	str	r3, [r2, #32]

    // configure TIM2 to wrap around at 1 Hz
	// and toggle CH1 output when the counter value is 0
    RCC->APB1ENR |= 1;              /* enable TIM2 clock */
 8000214:	4b14      	ldr	r3, [pc, #80]	; (8000268 <main+0x94>)
 8000216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000218:	4a13      	ldr	r2, [pc, #76]	; (8000268 <main+0x94>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 1600 - 1;           /* divided by 1600 */
 8000220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000224:	f240 623f 	movw	r2, #1599	; 0x63f
 8000228:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 10000 - 1;          /* divided by 10000 */
 800022a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCMR1 = 0x30;             /* set output to toggle on match */
 8000234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000238:	2230      	movs	r2, #48	; 0x30
 800023a:	619a      	str	r2, [r3, #24]
    TIM2->CCR1 = 0;                 /* set match value */
 800023c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000240:	2200      	movs	r2, #0
 8000242:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCER |= 1;                /* enable CH1 compare mode */
 8000244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000248:	6a1b      	ldr	r3, [r3, #32]
 800024a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6213      	str	r3, [r2, #32]
    TIM2->CNT = 0;                  /* clear counter */
 8000254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000258:	2200      	movs	r2, #0
 800025a:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->CR1 = 1;                  /* enable TIM2 */
 800025c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000260:	2201      	movs	r2, #1
 8000262:	601a      	str	r2, [r3, #0]

    while (1)
 8000264:	e7fe      	b.n	8000264 <main+0x90>
 8000266:	bf00      	nop
 8000268:	40023800 	.word	0x40023800
 800026c:	40020000 	.word	0x40020000

08000270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000274:	e7fe      	b.n	8000274 <NMI_Handler+0x4>

08000276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800027a:	e7fe      	b.n	800027a <HardFault_Handler+0x4>

0800027c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000280:	e7fe      	b.n	8000280 <MemManage_Handler+0x4>

08000282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000286:	e7fe      	b.n	8000286 <BusFault_Handler+0x4>

08000288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800028c:	e7fe      	b.n	800028c <UsageFault_Handler+0x4>

0800028e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002bc:	f000 f83e 	bl	800033c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <SystemInit+0x20>)
 80002ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <SystemInit+0x20>)
 80002d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002ee:	490e      	ldr	r1, [pc, #56]	; (8000328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002f0:	4a0e      	ldr	r2, [pc, #56]	; (800032c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000304:	4c0b      	ldr	r4, [pc, #44]	; (8000334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000312:	f7ff ffd7 	bl	80002c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000316:	f000 f825 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800031a:	f7ff ff5b 	bl	80001d4 <main>
  bx  lr    
 800031e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000320:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800032c:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000330:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000334:	20000024 	.word	0x20000024

08000338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_IncTick+0x20>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	461a      	mov	r2, r3
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <HAL_IncTick+0x24>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4413      	add	r3, r2
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <HAL_IncTick+0x24>)
 800034e:	6013      	str	r3, [r2, #0]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	20000000 	.word	0x20000000
 8000360:	20000020 	.word	0x20000020

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	; (800039c <__libc_init_array+0x38>)
 8000368:	4c0d      	ldr	r4, [pc, #52]	; (80003a0 <__libc_init_array+0x3c>)
 800036a:	1b64      	subs	r4, r4, r5
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	2600      	movs	r6, #0
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	; (80003a4 <__libc_init_array+0x40>)
 8000376:	4c0c      	ldr	r4, [pc, #48]	; (80003a8 <__libc_init_array+0x44>)
 8000378:	f000 f818 	bl	80003ac <_init>
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	2600      	movs	r6, #0
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
