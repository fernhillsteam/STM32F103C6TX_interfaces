
Example6_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000430  08000430  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000430  08000430  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000430  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000438  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800043c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800043c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a08  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005ed  00000000  00000000  00021a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00022030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00022200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ae0  00000000  00000000  00022388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f47  00000000  00000000  00035e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dace  00000000  00000000  00037daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b587d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  000b58d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000418 	.word	0x08000418

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000418 	.word	0x08000418

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <main>:

#define PERIOD 1000
void delayMs(int n);

int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000214:	b672      	cpsid	i
}
 8000216:	bf00      	nop
    __disable_irq();                /* global disable IRQs */
    RCC->AHB1ENR |=  1;	            /* enable GPIOA clock */
 8000218:	4b24      	ldr	r3, [pc, #144]	; (80002ac <main+0x9c>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a23      	ldr	r2, [pc, #140]	; (80002ac <main+0x9c>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOA->MODER &= ~0x00000C00;
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <main+0xa0>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a21      	ldr	r2, [pc, #132]	; (80002b0 <main+0xa0>)
 800022a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800022e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000800;    /* use alternate function */
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <main+0xa0>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <main+0xa0>)
 8000236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800023a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] = 0x00100000;     /* PA5 TIM2-CH1 */
 800023c:	4b1c      	ldr	r3, [pc, #112]	; (80002b0 <main+0xa0>)
 800023e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000242:	621a      	str	r2, [r3, #32]

    /* setup TIM2 */
    RCC->APB1ENR |= 1;              /* enable TIM2 clock */
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <main+0x9c>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000248:	4a18      	ldr	r2, [pc, #96]	; (80002ac <main+0x9c>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 16000 - 1;          /* divided by 16000 */
 8000250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000254:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000258:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF;             /* max count */
 800025a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000262:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCR1 = PERIOD;
 8000264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800026c:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CNT = 0;
 800026e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000272:	2200      	movs	r2, #0
 8000274:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->CCMR1 = 0x30;             /* Output compare toggle */
 8000276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027a:	2230      	movs	r2, #48	; 0x30
 800027c:	619a      	str	r2, [r3, #24]
    TIM2->CCER = 1;                 /* CC1 enable */
 800027e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000282:	2201      	movs	r2, #1
 8000284:	621a      	str	r2, [r3, #32]
    TIM2->CR1 = 1;                  /* enable counter */
 8000286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028a:	2201      	movs	r2, #1
 800028c:	601a      	str	r2, [r3, #0]

    TIM2->DIER |= 2;                /* enable CC1IE */
 800028e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000298:	f043 0302 	orr.w	r3, r3, #2
 800029c:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);      /* enable interrupt in NVIC */
 800029e:	201c      	movs	r0, #28
 80002a0:	f7ff ff98 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002a4:	b662      	cpsie	i
}
 80002a6:	bf00      	nop

    __enable_irq();                 /* global enable IRQs */

    while(1) {
 80002a8:	e7fe      	b.n	80002a8 <main+0x98>
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020000 	.word	0x40020000

080002b4 <TIM2_IRQHandler>:
    }
}

void TIM2_IRQHandler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
    TIM2->SR = 0;                   /* clear UIF */
 80002b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
    TIM2->CCR1 = (TIM2->CCR1 + PERIOD) & 0xFFFF;    /* update CCR1 */
 80002c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002c6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <NMI_Handler+0x4>

080002e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <HardFault_Handler+0x4>

080002e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <MemManage_Handler+0x4>

080002ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <BusFault_Handler+0x4>

080002f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <UsageFault_Handler+0x4>

080002fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr

08000324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000328:	f000 f83e 	bl	80003a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}

08000330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <SystemInit+0x20>)
 8000336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800033a:	4a05      	ldr	r2, [pc, #20]	; (8000350 <SystemInit+0x20>)
 800033c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800038c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800035a:	490e      	ldr	r1, [pc, #56]	; (8000394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800035c:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0b      	ldr	r2, [pc, #44]	; (800039c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000370:	4c0b      	ldr	r4, [pc, #44]	; (80003a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800037e:	f7ff ffd7 	bl	8000330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000382:	f000 f825 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000386:	f7ff ff43 	bl	8000210 <main>
  bx  lr    
 800038a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800038c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000398:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 800039c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003a0:	20000024 	.word	0x20000024

080003a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <HAL_IncTick+0x20>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	461a      	mov	r2, r3
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <HAL_IncTick+0x24>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4413      	add	r3, r2
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <HAL_IncTick+0x24>)
 80003ba:	6013      	str	r3, [r2, #0]
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	20000000 	.word	0x20000000
 80003cc:	20000020 	.word	0x20000020

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	4d0d      	ldr	r5, [pc, #52]	; (8000408 <__libc_init_array+0x38>)
 80003d4:	4c0d      	ldr	r4, [pc, #52]	; (800040c <__libc_init_array+0x3c>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	2600      	movs	r6, #0
 80003dc:	42a6      	cmp	r6, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	4d0b      	ldr	r5, [pc, #44]	; (8000410 <__libc_init_array+0x40>)
 80003e2:	4c0c      	ldr	r4, [pc, #48]	; (8000414 <__libc_init_array+0x44>)
 80003e4:	f000 f818 	bl	8000418 <_init>
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	2600      	movs	r6, #0
 80003ee:	42a6      	cmp	r6, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f8:	4798      	blx	r3
 80003fa:	3601      	adds	r6, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000402:	4798      	blx	r3
 8000404:	3601      	adds	r6, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000430 	.word	0x08000430
 800040c:	08000430 	.word	0x08000430
 8000410:	08000430 	.word	0x08000430
 8000414:	08000434 	.word	0x08000434

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
