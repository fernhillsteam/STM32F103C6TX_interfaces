
Example6_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000540  08000540  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000540  08000540  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000540  08000540  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000540  08000540  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000540  08000540  00010540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000544  08000544  00010544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000548  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800054c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800054c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c39  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000062b  00000000  00000000  00021c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00022298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  00022480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ae6  00000000  00000000  00022620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fff  00000000  00000000  00036106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007db06  00000000  00000000  00038105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5c0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005d8  00000000  00000000  000b5c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000528 	.word	0x08000528

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000528 	.word	0x08000528

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <main>:
/* priority of TIM3 and TTIM4 should be between 0 and 15 */
#define PRIO_TIM3 4
#define PRIO_TIM4 3

int main (void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000268:	b672      	cpsid	i
}
 800026a:	bf00      	nop
    __disable_irq();                /* global disable IRQs */
    RCC->AHB1ENR |=  1;	            /* enable GPIOA clock */
 800026c:	4b31      	ldr	r3, [pc, #196]	; (8000334 <main+0xd0>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a30      	ldr	r2, [pc, #192]	; (8000334 <main+0xd0>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |=  2;	            /* enable GPIOB clock */
 8000278:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <main+0xd0>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a2d      	ldr	r2, [pc, #180]	; (8000334 <main+0xd0>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOA->MODER &= ~0x00000C00;    /* pin PA5 (LED) output */
 8000284:	4b2c      	ldr	r3, [pc, #176]	; (8000338 <main+0xd4>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a2b      	ldr	r2, [pc, #172]	; (8000338 <main+0xd4>)
 800028a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800028e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000400;
 8000290:	4b29      	ldr	r3, [pc, #164]	; (8000338 <main+0xd4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a28      	ldr	r2, [pc, #160]	; (8000338 <main+0xd4>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~0x000003C0;    /* pins PB3, PB4 output */
 800029c:	4b27      	ldr	r3, [pc, #156]	; (800033c <main+0xd8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a26      	ldr	r2, [pc, #152]	; (800033c <main+0xd8>)
 80002a2:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 80002a6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  0x00000140;
 80002a8:	4b24      	ldr	r3, [pc, #144]	; (800033c <main+0xd8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a23      	ldr	r2, [pc, #140]	; (800033c <main+0xd8>)
 80002ae:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80002b2:	6013      	str	r3, [r2, #0]

    /* setup TIM3 */
    RCC->APB1ENR |= 2;              /* enable TIM3 clock */
 80002b4:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <main+0xd0>)
 80002b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b8:	4a1e      	ldr	r2, [pc, #120]	; (8000334 <main+0xd0>)
 80002ba:	f043 0302 	orr.w	r3, r3, #2
 80002be:	6413      	str	r3, [r2, #64]	; 0x40
    TIM3->PSC = 1000 - 1;           /* divided by 1000 */
 80002c0:	4b1f      	ldr	r3, [pc, #124]	; (8000340 <main+0xdc>)
 80002c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002c6:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 15500 - 1;          /* divided by 15500 */
 80002c8:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <main+0xdc>)
 80002ca:	f643 428b 	movw	r2, #15499	; 0x3c8b
 80002ce:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CR1 = 1;                  /* enable counter */
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <main+0xdc>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	601a      	str	r2, [r3, #0]

    TIM3->DIER |= 1;                /* enable UIE */
 80002d6:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <main+0xdc>)
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	4a19      	ldr	r2, [pc, #100]	; (8000340 <main+0xdc>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM3_IRQn, PRIO_TIM3);
 80002e2:	2104      	movs	r1, #4
 80002e4:	201d      	movs	r0, #29
 80002e6:	f7ff ff93 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);      /* enable interrupt in NVIC */
 80002ea:	201d      	movs	r0, #29
 80002ec:	f7ff ff72 	bl	80001d4 <__NVIC_EnableIRQ>

    /* setup TIM4 */
    RCC->APB1ENR |= 4;              /* enable TIM4 clock */
 80002f0:	4b10      	ldr	r3, [pc, #64]	; (8000334 <main+0xd0>)
 80002f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <main+0xd0>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6413      	str	r3, [r2, #64]	; 0x40
    TIM4->PSC = 1000 - 1;           /* divided by 1000 */
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <main+0xe0>)
 80002fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000302:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->ARR = 1562 - 1;           /* divided by 1562 */
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <main+0xe0>)
 8000306:	f240 6219 	movw	r2, #1561	; 0x619
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->CR1 = 1;                  /* enable counter */
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <main+0xe0>)
 800030e:	2201      	movs	r2, #1
 8000310:	601a      	str	r2, [r3, #0]

    TIM4->DIER |= 1;                /* enable UIE */
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <main+0xe0>)
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <main+0xe0>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM4_IRQn, PRIO_TIM4);
 800031e:	2103      	movs	r1, #3
 8000320:	201e      	movs	r0, #30
 8000322:	f7ff ff75 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM4_IRQn);      /* enable interrupt in NVIC */
 8000326:	201e      	movs	r0, #30
 8000328:	f7ff ff54 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800032c:	b662      	cpsie	i
}
 800032e:	bf00      	nop

    __enable_irq();                 /* enable interrupt globally */

    while(1)
 8000330:	e7fe      	b.n	8000330 <main+0xcc>
 8000332:	bf00      	nop
 8000334:	40023800 	.word	0x40023800
 8000338:	40020000 	.word	0x40020000
 800033c:	40020400 	.word	0x40020400
 8000340:	40000400 	.word	0x40000400
 8000344:	40000800 	.word	0x40000800

08000348 <TIM3_IRQHandler>:
    {
    }
}

void TIM3_IRQHandler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
    GPIOB->BSRR = 0x00000008;       /* turn on PB3 */
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <TIM3_IRQHandler+0x24>)
 800034e:	2208      	movs	r2, #8
 8000350:	619a      	str	r2, [r3, #24]
    delayMs(500);
 8000352:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000356:	f000 f82b 	bl	80003b0 <delayMs>
    GPIOB->BSRR = 0x00080000;       /* turn off PB3 */
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <TIM3_IRQHandler+0x24>)
 800035c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000360:	619a      	str	r2, [r3, #24]
    TIM3->SR = 0;                   /* clear UIF */
 8000362:	4b03      	ldr	r3, [pc, #12]	; (8000370 <TIM3_IRQHandler+0x28>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40020400 	.word	0x40020400
 8000370:	40000400 	.word	0x40000400

08000374 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
    GPIOA->BSRR = 0x00000020;       /* turn on LED */
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <TIM4_IRQHandler+0x30>)
 800037a:	2220      	movs	r2, #32
 800037c:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = 0x00000010;       /* turn on PB4 */
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <TIM4_IRQHandler+0x34>)
 8000380:	2210      	movs	r2, #16
 8000382:	619a      	str	r2, [r3, #24]
    delayMs(25);
 8000384:	2019      	movs	r0, #25
 8000386:	f000 f813 	bl	80003b0 <delayMs>
    GPIOA->BSRR = 0x00200000;       /* turn off LED */
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <TIM4_IRQHandler+0x30>)
 800038c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000390:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = 0x00100000;       /* turn off PB4 */
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <TIM4_IRQHandler+0x34>)
 8000394:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000398:	619a      	str	r2, [r3, #24]
    TIM4->SR = 0;                   /* clear UIF */
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <TIM4_IRQHandler+0x38>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40020000 	.word	0x40020000
 80003a8:	40020400 	.word	0x40020400
 80003ac:	40000800 	.word	0x40000800

080003b0 <delayMs>:

/* 16 MHz SYSCLK */
void delayMs(int n)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 80003b8:	e00d      	b.n	80003d6 <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	e002      	b.n	80003c6 <delayMs+0x16>
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	3301      	adds	r3, #1
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	f640 427a 	movw	r2, #3194	; 0xc7a
 80003cc:	4293      	cmp	r3, r2
 80003ce:	ddf7      	ble.n	80003c0 <delayMs+0x10>
    for (; n > 0; n--)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	dcee      	bgt.n	80003ba <delayMs+0xa>
}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <NMI_Handler+0x4>

080003f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <HardFault_Handler+0x4>

080003f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <MemManage_Handler+0x4>

080003fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <BusFault_Handler+0x4>

08000402 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <UsageFault_Handler+0x4>

08000408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000436:	f000 f83f 	bl	80004b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
	...

08000440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <SystemInit+0x20>)
 8000446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800044a:	4a05      	ldr	r2, [pc, #20]	; (8000460 <SystemInit+0x20>)
 800044c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800049c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000468:	480d      	ldr	r0, [pc, #52]	; (80004a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800046a:	490e      	ldr	r1, [pc, #56]	; (80004a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800046c:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000480:	4c0b      	ldr	r4, [pc, #44]	; (80004b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800048e:	f7ff ffd7 	bl	8000440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000492:	f000 f825 	bl	80004e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000496:	f7ff fee5 	bl	8000264 <main>
  bx  lr    
 800049a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800049c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004a8:	08000548 	.word	0x08000548
  ldr r2, =_sbss
 80004ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004b0:	20000024 	.word	0x20000024

080004b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_IncTick+0x20>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <HAL_IncTick+0x24>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4413      	add	r3, r2
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <HAL_IncTick+0x24>)
 80004ca:	6013      	str	r3, [r2, #0]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000000 	.word	0x20000000
 80004dc:	20000020 	.word	0x20000020

080004e0 <__libc_init_array>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	4d0d      	ldr	r5, [pc, #52]	; (8000518 <__libc_init_array+0x38>)
 80004e4:	4c0d      	ldr	r4, [pc, #52]	; (800051c <__libc_init_array+0x3c>)
 80004e6:	1b64      	subs	r4, r4, r5
 80004e8:	10a4      	asrs	r4, r4, #2
 80004ea:	2600      	movs	r6, #0
 80004ec:	42a6      	cmp	r6, r4
 80004ee:	d109      	bne.n	8000504 <__libc_init_array+0x24>
 80004f0:	4d0b      	ldr	r5, [pc, #44]	; (8000520 <__libc_init_array+0x40>)
 80004f2:	4c0c      	ldr	r4, [pc, #48]	; (8000524 <__libc_init_array+0x44>)
 80004f4:	f000 f818 	bl	8000528 <_init>
 80004f8:	1b64      	subs	r4, r4, r5
 80004fa:	10a4      	asrs	r4, r4, #2
 80004fc:	2600      	movs	r6, #0
 80004fe:	42a6      	cmp	r6, r4
 8000500:	d105      	bne.n	800050e <__libc_init_array+0x2e>
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	f855 3b04 	ldr.w	r3, [r5], #4
 8000508:	4798      	blx	r3
 800050a:	3601      	adds	r6, #1
 800050c:	e7ee      	b.n	80004ec <__libc_init_array+0xc>
 800050e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000512:	4798      	blx	r3
 8000514:	3601      	adds	r6, #1
 8000516:	e7f2      	b.n	80004fe <__libc_init_array+0x1e>
 8000518:	08000540 	.word	0x08000540
 800051c:	08000540 	.word	0x08000540
 8000520:	08000540 	.word	0x08000540
 8000524:	08000544 	.word	0x08000544

08000528 <_init>:
 8000528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052a:	bf00      	nop
 800052c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052e:	bc08      	pop	{r3}
 8000530:	469e      	mov	lr, r3
 8000532:	4770      	bx	lr

08000534 <_fini>:
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	bf00      	nop
 8000538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053a:	bc08      	pop	{r3}
 800053c:	469e      	mov	lr, r3
 800053e:	4770      	bx	lr
