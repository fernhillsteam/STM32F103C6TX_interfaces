
Example6_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800048c  0800048c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800048c  0800048c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800048c  0800048c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800048c  0800048c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800048c  0800048c  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000490  08000490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000494  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000498  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000498  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019d3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000065c  00000000  00000000  00021a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00022068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ada  00000000  00000000  000223d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f6f  00000000  00000000  00035eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007db07  00000000  00000000  00037e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000594  00000000  00000000  000b5974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000474 	.word	0x08000474

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000474 	.word	0x08000474

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <main>:
#include "stm32f4xx.h"

void delayMs(int n);

int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000214:	b672      	cpsid	i
}
 8000216:	bf00      	nop
    __disable_irq();                    /* global disable IRQs */

    RCC->AHB1ENR |= 4;	                /* enable GPIOC clock */
 8000218:	4b20      	ldr	r3, [pc, #128]	; (800029c <main+0x8c>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a1f      	ldr	r2, [pc, #124]	; (800029c <main+0x8c>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= 1;                  /* enable GPIOA clock */
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <main+0x8c>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a1c      	ldr	r2, [pc, #112]	; (800029c <main+0x8c>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= 0x4000;             /* enable SYSCFG clock */
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <main+0x8c>)
 8000232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000234:	4a19      	ldr	r2, [pc, #100]	; (800029c <main+0x8c>)
 8000236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800023a:	6453      	str	r3, [r2, #68]	; 0x44

    /* configure PA5 for LED */
    GPIOA->MODER &= ~0x00000C00;        /* clear pin mode */
 800023c:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <main+0x90>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <main+0x90>)
 8000242:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000246:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000400;        /* set pin to output mode */
 8000248:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <main+0x90>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <main+0x90>)
 800024e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000252:	6013      	str	r3, [r2, #0]

    /* configure PC13 for push button interrupt */
    GPIOC->MODER &= ~0x0C000000;        /* clear pin mode to input mode */
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <main+0x94>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <main+0x94>)
 800025a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800025e:	6013      	str	r3, [r2, #0]

    SYSCFG->EXTICR[3] &= ~0x00F0;       /* clear port selection for EXTI13 */
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <main+0x98>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <main+0x98>)
 8000266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800026a:	6153      	str	r3, [r2, #20]
    SYSCFG->EXTICR[3] |= 0x0020;        /* select port C for EXTI13 */
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <main+0x98>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <main+0x98>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6153      	str	r3, [r2, #20]

    EXTI->IMR |= 0x2000;                /* unmask EXTI13 */
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <main+0x9c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <main+0x9c>)
 800027e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000282:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= 0x2000;               /* select falling edge trigger */
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <main+0x9c>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a08      	ldr	r2, [pc, #32]	; (80002ac <main+0x9c>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028e:	60d3      	str	r3, [r2, #12]

//    NVIC->ISER[1] = 0x00000100;         /* enable IRQ40 (bit 8 of ISER[1]) */
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000290:	2028      	movs	r0, #40	; 0x28
 8000292:	f7ff ff9f 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000296:	b662      	cpsie	i
}
 8000298:	bf00      	nop

    __enable_irq();                     /* global enable IRQs */

    while(1) {
 800029a:	e7fe      	b.n	800029a <main+0x8a>
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40020800 	.word	0x40020800
 80002a8:	40013800 	.word	0x40013800
 80002ac:	40013c00 	.word	0x40013c00

080002b0 <EXTI15_10_IRQHandler>:
    }
}

void EXTI15_10_IRQHandler(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
        GPIOA->BSRR = 0x00000020;   /* turn on green LED */
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <EXTI15_10_IRQHandler+0x44>)
 80002b6:	2220      	movs	r2, #32
 80002b8:	619a      	str	r2, [r3, #24]
        delayMs(250);
 80002ba:	20fa      	movs	r0, #250	; 0xfa
 80002bc:	f000 f81e 	bl	80002fc <delayMs>
        GPIOA->BSRR = 0x00200000;   /* turn off green LED */
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <EXTI15_10_IRQHandler+0x44>)
 80002c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002c6:	619a      	str	r2, [r3, #24]
        delayMs(250);
 80002c8:	20fa      	movs	r0, #250	; 0xfa
 80002ca:	f000 f817 	bl	80002fc <delayMs>
        GPIOA->BSRR = 0x00000020;   /* turn on green LED */
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <EXTI15_10_IRQHandler+0x44>)
 80002d0:	2220      	movs	r2, #32
 80002d2:	619a      	str	r2, [r3, #24]
        delayMs(250);
 80002d4:	20fa      	movs	r0, #250	; 0xfa
 80002d6:	f000 f811 	bl	80002fc <delayMs>
        GPIOA->BSRR = 0x00200000;   /* turn off green LED */
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <EXTI15_10_IRQHandler+0x44>)
 80002dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002e0:	619a      	str	r2, [r3, #24]
        delayMs(250);
 80002e2:	20fa      	movs	r0, #250	; 0xfa
 80002e4:	f000 f80a 	bl	80002fc <delayMs>

        EXTI->PR = 0x2000;          /* clear interrupt pending flag */
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <EXTI15_10_IRQHandler+0x48>)
 80002ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002ee:	615a      	str	r2, [r3, #20]
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40020000 	.word	0x40020000
 80002f8:	40013c00 	.word	0x40013c00

080002fc <delayMs>:

/* 16 MHz SYSCLK */
void delayMs(int n)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 8000304:	e00d      	b.n	8000322 <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	e002      	b.n	8000312 <delayMs+0x16>
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	3301      	adds	r3, #1
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000318:	4293      	cmp	r3, r2
 800031a:	ddf7      	ble.n	800030c <delayMs+0x10>
    for (; n > 0; n--)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3b01      	subs	r3, #1
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b00      	cmp	r3, #0
 8000326:	dcee      	bgt.n	8000306 <delayMs+0xa>
}
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800033a:	e7fe      	b.n	800033a <NMI_Handler+0x4>

0800033c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <HardFault_Handler+0x4>

08000342 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <MemManage_Handler+0x4>

08000348 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <BusFault_Handler+0x4>

0800034e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <UsageFault_Handler+0x4>

08000354 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr

0800037e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000382:	f000 f83f 	bl	8000404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <SystemInit+0x20>)
 8000392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <SystemInit+0x20>)
 8000398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800039c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003b6:	490e      	ldr	r1, [pc, #56]	; (80003f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003b8:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003cc:	4c0b      	ldr	r4, [pc, #44]	; (80003fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003da:	f7ff ffd7 	bl	800038c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f000 f825 	bl	800042c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e2:	f7ff ff15 	bl	8000210 <main>
  bx  lr    
 80003e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003f4:	08000494 	.word	0x08000494
  ldr r2, =_sbss
 80003f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003fc:	20000024 	.word	0x20000024

08000400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <HAL_IncTick+0x20>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	461a      	mov	r2, r3
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <HAL_IncTick+0x24>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4413      	add	r3, r2
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_IncTick+0x24>)
 8000416:	6013      	str	r3, [r2, #0]
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	20000000 	.word	0x20000000
 8000428:	20000020 	.word	0x20000020

0800042c <__libc_init_array>:
 800042c:	b570      	push	{r4, r5, r6, lr}
 800042e:	4d0d      	ldr	r5, [pc, #52]	; (8000464 <__libc_init_array+0x38>)
 8000430:	4c0d      	ldr	r4, [pc, #52]	; (8000468 <__libc_init_array+0x3c>)
 8000432:	1b64      	subs	r4, r4, r5
 8000434:	10a4      	asrs	r4, r4, #2
 8000436:	2600      	movs	r6, #0
 8000438:	42a6      	cmp	r6, r4
 800043a:	d109      	bne.n	8000450 <__libc_init_array+0x24>
 800043c:	4d0b      	ldr	r5, [pc, #44]	; (800046c <__libc_init_array+0x40>)
 800043e:	4c0c      	ldr	r4, [pc, #48]	; (8000470 <__libc_init_array+0x44>)
 8000440:	f000 f818 	bl	8000474 <_init>
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	10a4      	asrs	r4, r4, #2
 8000448:	2600      	movs	r6, #0
 800044a:	42a6      	cmp	r6, r4
 800044c:	d105      	bne.n	800045a <__libc_init_array+0x2e>
 800044e:	bd70      	pop	{r4, r5, r6, pc}
 8000450:	f855 3b04 	ldr.w	r3, [r5], #4
 8000454:	4798      	blx	r3
 8000456:	3601      	adds	r6, #1
 8000458:	e7ee      	b.n	8000438 <__libc_init_array+0xc>
 800045a:	f855 3b04 	ldr.w	r3, [r5], #4
 800045e:	4798      	blx	r3
 8000460:	3601      	adds	r6, #1
 8000462:	e7f2      	b.n	800044a <__libc_init_array+0x1e>
 8000464:	0800048c 	.word	0x0800048c
 8000468:	0800048c 	.word	0x0800048c
 800046c:	0800048c 	.word	0x0800048c
 8000470:	08000490 	.word	0x08000490

08000474 <_init>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr

08000480 <_fini>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	bf00      	nop
 8000484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000486:	bc08      	pop	{r3}
 8000488:	469e      	mov	lr, r3
 800048a:	4770      	bx	lr
