
Example4_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800043c  0800043c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800043c  0800043c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800043c  0800043c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800043c  0800043c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000444  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000448  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000448  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001669  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000599  00000000  00000000  0002169d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00021c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ada  00000000  00000000  00021fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f5c  00000000  00000000  00035a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da84  00000000  00000000  000379d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b545a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000598  00000000  00000000  000b54b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000424 	.word	0x08000424

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000424 	.word	0x08000424

080001d4 <main>:
void delayMs(int);

/*----------------------------------------------------------------------------
  MAIN function
 *----------------------------------------------------------------------------*/
int main (void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
    USART2_init();          /* initialize USART2 */
 80001d8:	f000 f80e 	bl	80001f8 <USART2_init>

    while(1) {              /* Loop forever */
        USART2_write('Y');
 80001dc:	2059      	movs	r0, #89	; 0x59
 80001de:	f000 f84f 	bl	8000280 <USART2_write>
        USART2_write('e');
 80001e2:	2065      	movs	r0, #101	; 0x65
 80001e4:	f000 f84c 	bl	8000280 <USART2_write>
        USART2_write('s');
 80001e8:	2073      	movs	r0, #115	; 0x73
 80001ea:	f000 f849 	bl	8000280 <USART2_write>
        delayMs(100);        /* leave a gap between messages */
 80001ee:	2064      	movs	r0, #100	; 0x64
 80001f0:	f000 f85e 	bl	80002b0 <delayMs>
        USART2_write('Y');
 80001f4:	e7f2      	b.n	80001dc <main+0x8>
	...

080001f8 <USART2_init>:
}

/*----------------------------------------------------------------------------
  Initialize UART pins, Baudrate
 *----------------------------------------------------------------------------*/
void USART2_init (void) {
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;          /* Enable GPIOA clock */
 80001fc:	4b1d      	ldr	r3, [pc, #116]	; (8000274 <USART2_init+0x7c>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	4a1c      	ldr	r2, [pc, #112]	; (8000274 <USART2_init+0x7c>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= 0x20000;    /* Enable USART2 clock */
 8000208:	4b1a      	ldr	r3, [pc, #104]	; (8000274 <USART2_init+0x7c>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800020c:	4a19      	ldr	r2, [pc, #100]	; (8000274 <USART2_init+0x7c>)
 800020e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000212:	6413      	str	r3, [r2, #64]	; 0x40

    /* Configure PA2 for USART2_TX */
    GPIOA->AFR[0] &= ~0x0F00;
 8000214:	4b18      	ldr	r3, [pc, #96]	; (8000278 <USART2_init+0x80>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a17      	ldr	r2, [pc, #92]	; (8000278 <USART2_init+0x80>)
 800021a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800021e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  0x0700;   /* alt7 for USART2 */
 8000220:	4b15      	ldr	r3, [pc, #84]	; (8000278 <USART2_init+0x80>)
 8000222:	6a1b      	ldr	r3, [r3, #32]
 8000224:	4a14      	ldr	r2, [pc, #80]	; (8000278 <USART2_init+0x80>)
 8000226:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800022a:	6213      	str	r3, [r2, #32]
    GPIOA->MODER  &= ~0x0030;
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <USART2_init+0x80>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a11      	ldr	r2, [pc, #68]	; (8000278 <USART2_init+0x80>)
 8000232:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000236:	6013      	str	r3, [r2, #0]
    GPIOA->MODER  |=  0x0020;   /* enable alternate function for PA2 */
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <USART2_init+0x80>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <USART2_init+0x80>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6013      	str	r3, [r2, #0]

    USART2->BRR = 0x0683;       /* 9600 baud @ 16 MHz */
 8000244:	4b0d      	ldr	r3, [pc, #52]	; (800027c <USART2_init+0x84>)
 8000246:	f240 6283 	movw	r2, #1667	; 0x683
 800024a:	609a      	str	r2, [r3, #8]
    USART2->CR1 = 0x0008;       /* enable Tx, 8-bit data */
 800024c:	4b0b      	ldr	r3, [pc, #44]	; (800027c <USART2_init+0x84>)
 800024e:	2208      	movs	r2, #8
 8000250:	60da      	str	r2, [r3, #12]
    USART2->CR2 = 0x0000;       /* 1 stop bit */
 8000252:	4b0a      	ldr	r3, [pc, #40]	; (800027c <USART2_init+0x84>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
    USART2->CR3 = 0x0000;       /* no flow control */
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <USART2_init+0x84>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
    USART2->CR1 |= 0x2000;      /* enable USART2 */
 800025e:	4b07      	ldr	r3, [pc, #28]	; (800027c <USART2_init+0x84>)
 8000260:	68db      	ldr	r3, [r3, #12]
 8000262:	4a06      	ldr	r2, [pc, #24]	; (800027c <USART2_init+0x84>)
 8000264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000268:	60d3      	str	r3, [r2, #12]
}
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800
 8000278:	40020000 	.word	0x40020000
 800027c:	40004400 	.word	0x40004400

08000280 <USART2_write>:


/* Write a character to USART2 */
void USART2_write (int ch) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    while (!(USART2->SR & 0x0080)) {}   // wait until Tx buffer empty
 8000288:	bf00      	nop
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <USART2_write+0x2c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0f9      	beq.n	800028a <USART2_write+0xa>
    USART2->DR = (ch & 0xFF);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <USART2_write+0x2c>)
 800029a:	b2db      	uxtb	r3, r3
 800029c:	6053      	str	r3, [r2, #4]
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40004400 	.word	0x40004400

080002b0 <delayMs>:

void delayMs(int n) {
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 80002b8:	e00c      	b.n	80002d4 <delayMs+0x24>
        for (i = 0; i < 2000; i++) ;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e002      	b.n	80002c6 <delayMs+0x16>
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002cc:	dbf8      	blt.n	80002c0 <delayMs+0x10>
    for (; n > 0; n--)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	dcef      	bgt.n	80002ba <delayMs+0xa>
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <NMI_Handler+0x4>

080002ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <HardFault_Handler+0x4>

080002f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <MemManage_Handler+0x4>

080002fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <BusFault_Handler+0x4>

08000300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <UsageFault_Handler+0x4>

08000306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000334:	f000 f83e 	bl	80003b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}

0800033c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <SystemInit+0x20>)
 8000342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000346:	4a05      	ldr	r2, [pc, #20]	; (800035c <SystemInit+0x20>)
 8000348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800034c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e000ed00 	.word	0xe000ed00

08000360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000398 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000364:	480d      	ldr	r0, [pc, #52]	; (800039c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000366:	490e      	ldr	r1, [pc, #56]	; (80003a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000368:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800037c:	4c0b      	ldr	r4, [pc, #44]	; (80003ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800038a:	f7ff ffd7 	bl	800033c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800038e:	f000 f825 	bl	80003dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000392:	f7ff ff1f 	bl	80001d4 <main>
  bx  lr    
 8000396:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000398:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a4:	08000444 	.word	0x08000444
  ldr r2, =_sbss
 80003a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003ac:	20000024 	.word	0x20000024

080003b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <HAL_IncTick+0x20>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	461a      	mov	r2, r3
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <HAL_IncTick+0x24>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4413      	add	r3, r2
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_IncTick+0x24>)
 80003c6:	6013      	str	r3, [r2, #0]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000020 	.word	0x20000020

080003dc <__libc_init_array>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	4d0d      	ldr	r5, [pc, #52]	; (8000414 <__libc_init_array+0x38>)
 80003e0:	4c0d      	ldr	r4, [pc, #52]	; (8000418 <__libc_init_array+0x3c>)
 80003e2:	1b64      	subs	r4, r4, r5
 80003e4:	10a4      	asrs	r4, r4, #2
 80003e6:	2600      	movs	r6, #0
 80003e8:	42a6      	cmp	r6, r4
 80003ea:	d109      	bne.n	8000400 <__libc_init_array+0x24>
 80003ec:	4d0b      	ldr	r5, [pc, #44]	; (800041c <__libc_init_array+0x40>)
 80003ee:	4c0c      	ldr	r4, [pc, #48]	; (8000420 <__libc_init_array+0x44>)
 80003f0:	f000 f818 	bl	8000424 <_init>
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	10a4      	asrs	r4, r4, #2
 80003f8:	2600      	movs	r6, #0
 80003fa:	42a6      	cmp	r6, r4
 80003fc:	d105      	bne.n	800040a <__libc_init_array+0x2e>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	f855 3b04 	ldr.w	r3, [r5], #4
 8000404:	4798      	blx	r3
 8000406:	3601      	adds	r6, #1
 8000408:	e7ee      	b.n	80003e8 <__libc_init_array+0xc>
 800040a:	f855 3b04 	ldr.w	r3, [r5], #4
 800040e:	4798      	blx	r3
 8000410:	3601      	adds	r6, #1
 8000412:	e7f2      	b.n	80003fa <__libc_init_array+0x1e>
 8000414:	0800043c 	.word	0x0800043c
 8000418:	0800043c 	.word	0x0800043c
 800041c:	0800043c 	.word	0x0800043c
 8000420:	08000440 	.word	0x08000440

08000424 <_init>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr

08000430 <_fini>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr
