
Example6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800055c  0800055c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800055c  0800055c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800055c  0800055c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800055c  0800055c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000560  08000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000564  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000568  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000568  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019d3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000065c  00000000  00000000  00021a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00022068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ada  00000000  00000000  000223d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fcf  00000000  00000000  00035eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007db08  00000000  00000000  00037e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5981  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000594  00000000  00000000  000b59d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000544 	.word	0x08000544

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000544 	.word	0x08000544

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <main>:
#include "stm32f4xx.h"

void delayMs(int n);

int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000214:	b672      	cpsid	i
}
 8000216:	bf00      	nop
    __disable_irq();                    /* global disable IRQs */

    RCC->AHB1ENR |= 4;	                /* enable GPIOC clock */
 8000218:	4b38      	ldr	r3, [pc, #224]	; (80002fc <main+0xec>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a37      	ldr	r2, [pc, #220]	; (80002fc <main+0xec>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= 2;                  /* enable GPIOB clock */
 8000224:	4b35      	ldr	r3, [pc, #212]	; (80002fc <main+0xec>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a34      	ldr	r2, [pc, #208]	; (80002fc <main+0xec>)
 800022a:	f043 0302 	orr.w	r3, r3, #2
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= 1;                  /* enable GPIOA clock */
 8000230:	4b32      	ldr	r3, [pc, #200]	; (80002fc <main+0xec>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000234:	4a31      	ldr	r2, [pc, #196]	; (80002fc <main+0xec>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= 0x4000;             /* enable SYSCFG clock */
 800023c:	4b2f      	ldr	r3, [pc, #188]	; (80002fc <main+0xec>)
 800023e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000240:	4a2e      	ldr	r2, [pc, #184]	; (80002fc <main+0xec>)
 8000242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000246:	6453      	str	r3, [r2, #68]	; 0x44

    /* configure PA5 for LED */
    GPIOA->MODER &= ~0x00000C00;        /* clear pin mode */
 8000248:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <main+0xf0>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a2c      	ldr	r2, [pc, #176]	; (8000300 <main+0xf0>)
 800024e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000252:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000400;        /* set pin to output mode */
 8000254:	4b2a      	ldr	r3, [pc, #168]	; (8000300 <main+0xf0>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a29      	ldr	r2, [pc, #164]	; (8000300 <main+0xf0>)
 800025a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025e:	6013      	str	r3, [r2, #0]

    /* configure PC13 for push button interrupt */
    GPIOC->MODER &= ~0x0C000000;        /* clear pin mode to input mode */
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <main+0xf4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a27      	ldr	r2, [pc, #156]	; (8000304 <main+0xf4>)
 8000266:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800026a:	6013      	str	r3, [r2, #0]

    SYSCFG->EXTICR[3] &= ~0x00F0;       /* clear port selection for EXTI13 */
 800026c:	4b26      	ldr	r3, [pc, #152]	; (8000308 <main+0xf8>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a25      	ldr	r2, [pc, #148]	; (8000308 <main+0xf8>)
 8000272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000276:	6153      	str	r3, [r2, #20]
    SYSCFG->EXTICR[3] |= 0x0020;        /* select port C for EXTI13 */
 8000278:	4b23      	ldr	r3, [pc, #140]	; (8000308 <main+0xf8>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	4a22      	ldr	r2, [pc, #136]	; (8000308 <main+0xf8>)
 800027e:	f043 0320 	orr.w	r3, r3, #32
 8000282:	6153      	str	r3, [r2, #20]

    EXTI->IMR |= 0x2000;                /* unmask EXTI13 */
 8000284:	4b21      	ldr	r3, [pc, #132]	; (800030c <main+0xfc>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a20      	ldr	r2, [pc, #128]	; (800030c <main+0xfc>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028e:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= 0x2000;               /* select falling edge trigger */
 8000290:	4b1e      	ldr	r3, [pc, #120]	; (800030c <main+0xfc>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a1d      	ldr	r2, [pc, #116]	; (800030c <main+0xfc>)
 8000296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800029a:	60d3      	str	r3, [r2, #12]

    /* configure PB10 for interrupt */
    GPIOB->MODER &= ~0x00030000;        /* clear pin mode to input mode */
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <main+0x100>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1b      	ldr	r2, [pc, #108]	; (8000310 <main+0x100>)
 80002a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002a6:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~0x00300000;
 80002a8:	4b19      	ldr	r3, [pc, #100]	; (8000310 <main+0x100>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a18      	ldr	r2, [pc, #96]	; (8000310 <main+0x100>)
 80002ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80002b2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  0x00100000;        /* enable pull up resistor */
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <main+0x100>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a15      	ldr	r2, [pc, #84]	; (8000310 <main+0x100>)
 80002ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002be:	60d3      	str	r3, [r2, #12]

    SYSCFG->EXTICR[2] &= ~0x0F00;       /* clear port selection for EXTI10 */
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <main+0xf8>)
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	4a10      	ldr	r2, [pc, #64]	; (8000308 <main+0xf8>)
 80002c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80002ca:	6113      	str	r3, [r2, #16]
    SYSCFG->EXTICR[2] |= 0x0100;        /* select port B for EXTI10 */
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <main+0xf8>)
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <main+0xf8>)
 80002d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d6:	6113      	str	r3, [r2, #16]

    EXTI->IMR |= 0x0400;                /* unmask EXTI10 */
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <main+0xfc>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0b      	ldr	r2, [pc, #44]	; (800030c <main+0xfc>)
 80002de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e2:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= 0x0400;               /* select falling edge trigger */
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <main+0xfc>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	4a08      	ldr	r2, [pc, #32]	; (800030c <main+0xfc>)
 80002ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ee:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI15_10_IRQn);     /* enable interrupt in NVIC */
 80002f0:	2028      	movs	r0, #40	; 0x28
 80002f2:	f7ff ff6f 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002f6:	b662      	cpsie	i
}
 80002f8:	bf00      	nop
    __enable_irq();                     /* global enable IRQs */

    while(1) {
 80002fa:	e7fe      	b.n	80002fa <main+0xea>
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020000 	.word	0x40020000
 8000304:	40020800 	.word	0x40020800
 8000308:	40013800 	.word	0x40013800
 800030c:	40013c00 	.word	0x40013c00
 8000310:	40020400 	.word	0x40020400

08000314 <EXTI15_10_IRQHandler>:
    }
}

void EXTI15_10_IRQHandler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    if (EXTI->PR == 0x2000) {       /* interrupt from PC13 */
 8000318:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <EXTI15_10_IRQHandler+0xb0>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000320:	d11e      	bne.n	8000360 <EXTI15_10_IRQHandler+0x4c>
        GPIOA->BSRR = 0x00000020;   /* turn on green LED */
 8000322:	4b29      	ldr	r3, [pc, #164]	; (80003c8 <EXTI15_10_IRQHandler+0xb4>)
 8000324:	2220      	movs	r2, #32
 8000326:	619a      	str	r2, [r3, #24]
        delayMs(250);
 8000328:	20fa      	movs	r0, #250	; 0xfa
 800032a:	f000 f84f 	bl	80003cc <delayMs>
        GPIOA->BSRR = 0x00200000;   /* turn off green LED */
 800032e:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <EXTI15_10_IRQHandler+0xb4>)
 8000330:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000334:	619a      	str	r2, [r3, #24]
        delayMs(250);
 8000336:	20fa      	movs	r0, #250	; 0xfa
 8000338:	f000 f848 	bl	80003cc <delayMs>
        GPIOA->BSRR = 0x00000020;   /* turn on green LED */
 800033c:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <EXTI15_10_IRQHandler+0xb4>)
 800033e:	2220      	movs	r2, #32
 8000340:	619a      	str	r2, [r3, #24]
        delayMs(250);
 8000342:	20fa      	movs	r0, #250	; 0xfa
 8000344:	f000 f842 	bl	80003cc <delayMs>
        GPIOA->BSRR = 0x00200000;   /* turn off green LED */
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <EXTI15_10_IRQHandler+0xb4>)
 800034a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800034e:	619a      	str	r2, [r3, #24]
        delayMs(250);
 8000350:	20fa      	movs	r0, #250	; 0xfa
 8000352:	f000 f83b 	bl	80003cc <delayMs>

        EXTI->PR = 0x2000;          /* clear interrupt pending flag */
 8000356:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <EXTI15_10_IRQHandler+0xb0>)
 8000358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800035c:	615a      	str	r2, [r3, #20]
        GPIOA->BSRR = 0x00200000;   /* turn off green LED */
        delayMs(250);

        EXTI->PR = 0x0400;          /* clear interrupt pending flag */
    }
}
 800035e:	e02f      	b.n	80003c0 <EXTI15_10_IRQHandler+0xac>
    else if (EXTI->PR == 0x0400)
 8000360:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <EXTI15_10_IRQHandler+0xb0>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000368:	d12a      	bne.n	80003c0 <EXTI15_10_IRQHandler+0xac>
        GPIOA->BSRR = 0x00000020;   /* turn on green LED */
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <EXTI15_10_IRQHandler+0xb4>)
 800036c:	2220      	movs	r2, #32
 800036e:	619a      	str	r2, [r3, #24]
        delayMs(250);
 8000370:	20fa      	movs	r0, #250	; 0xfa
 8000372:	f000 f82b 	bl	80003cc <delayMs>
        GPIOA->BSRR = 0x00200000;   /* turn off green LED */
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <EXTI15_10_IRQHandler+0xb4>)
 8000378:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800037c:	619a      	str	r2, [r3, #24]
        delayMs(250);
 800037e:	20fa      	movs	r0, #250	; 0xfa
 8000380:	f000 f824 	bl	80003cc <delayMs>
        GPIOA->BSRR = 0x00000020;   /* turn on green LED */
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <EXTI15_10_IRQHandler+0xb4>)
 8000386:	2220      	movs	r2, #32
 8000388:	619a      	str	r2, [r3, #24]
        delayMs(250);
 800038a:	20fa      	movs	r0, #250	; 0xfa
 800038c:	f000 f81e 	bl	80003cc <delayMs>
        GPIOA->BSRR = 0x00200000;   /* turn off green LED */
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <EXTI15_10_IRQHandler+0xb4>)
 8000392:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000396:	619a      	str	r2, [r3, #24]
        delayMs(250);
 8000398:	20fa      	movs	r0, #250	; 0xfa
 800039a:	f000 f817 	bl	80003cc <delayMs>
        GPIOA->BSRR = 0x00000020;   /* turn on green LED */
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <EXTI15_10_IRQHandler+0xb4>)
 80003a0:	2220      	movs	r2, #32
 80003a2:	619a      	str	r2, [r3, #24]
        delayMs(250);
 80003a4:	20fa      	movs	r0, #250	; 0xfa
 80003a6:	f000 f811 	bl	80003cc <delayMs>
        GPIOA->BSRR = 0x00200000;   /* turn off green LED */
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <EXTI15_10_IRQHandler+0xb4>)
 80003ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003b0:	619a      	str	r2, [r3, #24]
        delayMs(250);
 80003b2:	20fa      	movs	r0, #250	; 0xfa
 80003b4:	f000 f80a 	bl	80003cc <delayMs>
        EXTI->PR = 0x0400;          /* clear interrupt pending flag */
 80003b8:	4b02      	ldr	r3, [pc, #8]	; (80003c4 <EXTI15_10_IRQHandler+0xb0>)
 80003ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003be:	615a      	str	r2, [r3, #20]
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40013c00 	.word	0x40013c00
 80003c8:	40020000 	.word	0x40020000

080003cc <delayMs>:

/* 16 MHz SYSCLK */
void delayMs(int n)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 80003d4:	e00d      	b.n	80003f2 <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	e002      	b.n	80003e2 <delayMs+0x16>
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	3301      	adds	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f640 427a 	movw	r2, #3194	; 0xc7a
 80003e8:	4293      	cmp	r3, r2
 80003ea:	ddf7      	ble.n	80003dc <delayMs+0x10>
    for (; n > 0; n--)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	dcee      	bgt.n	80003d6 <delayMs+0xa>
}
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800040a:	e7fe      	b.n	800040a <NMI_Handler+0x4>

0800040c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <HardFault_Handler+0x4>

08000412 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <MemManage_Handler+0x4>

08000418 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <BusFault_Handler+0x4>

0800041e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <UsageFault_Handler+0x4>

08000424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000452:	f000 f83f 	bl	80004d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <SystemInit+0x20>)
 8000462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000466:	4a05      	ldr	r2, [pc, #20]	; (800047c <SystemInit+0x20>)
 8000468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800046c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	e000ed00 	.word	0xe000ed00

08000480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000484:	480d      	ldr	r0, [pc, #52]	; (80004bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000486:	490e      	ldr	r1, [pc, #56]	; (80004c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000488:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800049c:	4c0b      	ldr	r4, [pc, #44]	; (80004cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004aa:	f7ff ffd7 	bl	800045c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ae:	f000 f825 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004b2:	f7ff fead 	bl	8000210 <main>
  bx  lr    
 80004b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004c4:	08000564 	.word	0x08000564
  ldr r2, =_sbss
 80004c8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004cc:	20000024 	.word	0x20000024

080004d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004d0:	e7fe      	b.n	80004d0 <ADC_IRQHandler>
	...

080004d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_IncTick+0x20>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_IncTick+0x24>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4413      	add	r3, r2
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_IncTick+0x24>)
 80004e6:	6013      	str	r3, [r2, #0]
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000000 	.word	0x20000000
 80004f8:	20000020 	.word	0x20000020

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	4d0d      	ldr	r5, [pc, #52]	; (8000534 <__libc_init_array+0x38>)
 8000500:	4c0d      	ldr	r4, [pc, #52]	; (8000538 <__libc_init_array+0x3c>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	2600      	movs	r6, #0
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	4d0b      	ldr	r5, [pc, #44]	; (800053c <__libc_init_array+0x40>)
 800050e:	4c0c      	ldr	r4, [pc, #48]	; (8000540 <__libc_init_array+0x44>)
 8000510:	f000 f818 	bl	8000544 <_init>
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	2600      	movs	r6, #0
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	0800055c 	.word	0x0800055c
 8000538:	0800055c 	.word	0x0800055c
 800053c:	0800055c 	.word	0x0800055c
 8000540:	08000560 	.word	0x08000560

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
