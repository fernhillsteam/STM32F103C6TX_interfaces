
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000354  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e8  080004e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e8  080004e8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004e8  080004e8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e8  080004e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e8  080004e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004ec  080004ec  000104ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004f0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004f4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004f4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001631  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e0  00000000  00000000  00021665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00021c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  00021e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a77  00000000  00000000  00021fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001faf  00000000  00000000  00035a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d4a9  00000000  00000000  000379f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b4e9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005d4  00000000  00000000  000b4ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004d0 	.word	0x080004d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004d0 	.word	0x080004d0

080001d4 <main>:
void LCD_data(char data);
void LCD_init(void);
void PORTS_init(void);

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
    /* initialize LCD controller */
    LCD_init();
 80001d8:	f000 f81b 	bl	8000212 <LCD_init>

    while(1)
    {
        /* Write "hello" on LCD */
        LCD_data('H');
 80001dc:	2048      	movs	r0, #72	; 0x48
 80001de:	f000 f897 	bl	8000310 <LCD_data>
        LCD_data('E');
 80001e2:	2045      	movs	r0, #69	; 0x45
 80001e4:	f000 f894 	bl	8000310 <LCD_data>
        LCD_data('L');
 80001e8:	204c      	movs	r0, #76	; 0x4c
 80001ea:	f000 f891 	bl	8000310 <LCD_data>
        LCD_data('L');
 80001ee:	204c      	movs	r0, #76	; 0x4c
 80001f0:	f000 f88e 	bl	8000310 <LCD_data>
        LCD_data('O');
 80001f4:	204f      	movs	r0, #79	; 0x4f
 80001f6:	f000 f88b 	bl	8000310 <LCD_data>
        delayMs(1000);
 80001fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fe:	f000 f8ab 	bl	8000358 <delayMs>

        /* clear LCD display */
        LCD_command(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f000 f85c 	bl	80002c0 <LCD_command>
        delayMs(500);
 8000208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020c:	f000 f8a4 	bl	8000358 <delayMs>
        LCD_data('H');
 8000210:	e7e4      	b.n	80001dc <main+0x8>

08000212 <LCD_init>:
    }
}

/* initialize port pins then initialize LCD controller */
void LCD_init(void)
{
 8000212:	b580      	push	{r7, lr}
 8000214:	af00      	add	r7, sp, #0
    PORTS_init();
 8000216:	f000 f821 	bl	800025c <PORTS_init>

    delayMs(30);            /* initialization sequence */
 800021a:	201e      	movs	r0, #30
 800021c:	f000 f89c 	bl	8000358 <delayMs>
    LCD_command(0x30);
 8000220:	2030      	movs	r0, #48	; 0x30
 8000222:	f000 f84d 	bl	80002c0 <LCD_command>
    delayMs(10);
 8000226:	200a      	movs	r0, #10
 8000228:	f000 f896 	bl	8000358 <delayMs>
    LCD_command(0x30);
 800022c:	2030      	movs	r0, #48	; 0x30
 800022e:	f000 f847 	bl	80002c0 <LCD_command>
    delayMs(1);
 8000232:	2001      	movs	r0, #1
 8000234:	f000 f890 	bl	8000358 <delayMs>
    LCD_command(0x30);
 8000238:	2030      	movs	r0, #48	; 0x30
 800023a:	f000 f841 	bl	80002c0 <LCD_command>

    LCD_command(0x38);      /* set 8-bit data, 2-line, 5x7 font */
 800023e:	2038      	movs	r0, #56	; 0x38
 8000240:	f000 f83e 	bl	80002c0 <LCD_command>
    LCD_command(0x06);      /* move cursor right after each char */
 8000244:	2006      	movs	r0, #6
 8000246:	f000 f83b 	bl	80002c0 <LCD_command>
    LCD_command(0x01);      /* clear screen, move cursor to home */
 800024a:	2001      	movs	r0, #1
 800024c:	f000 f838 	bl	80002c0 <LCD_command>
    LCD_command(0x0F);      /* turn on display, cursor blinking */
 8000250:	200f      	movs	r0, #15
 8000252:	f000 f835 	bl	80002c0 <LCD_command>
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <PORTS_init>:

void PORTS_init(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |=  0x06;          /* enable GPIOB/C clock */
 8000260:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <PORTS_init+0x58>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a13      	ldr	r2, [pc, #76]	; (80002b4 <PORTS_init+0x58>)
 8000266:	f043 0306 	orr.w	r3, r3, #6
 800026a:	6313      	str	r3, [r2, #48]	; 0x30

    /* PB5 for LCD R/S */
    /* PB6 for LCD R/W */
    /* PB7 for LCD EN */
    GPIOB->MODER &= ~0x0000FC00;    /* clear pin mode */
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <PORTS_init+0x5c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <PORTS_init+0x5c>)
 8000272:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000276:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  0x00005400;    /* set pin output mode */
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <PORTS_init+0x5c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0e      	ldr	r2, [pc, #56]	; (80002b8 <PORTS_init+0x5c>)
 800027e:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8000282:	6013      	str	r3, [r2, #0]
    GPIOB->BSRR = 0x00C00000;       /* turn off EN and R/W */
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <PORTS_init+0x5c>)
 8000286:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800028a:	619a      	str	r2, [r3, #24]

    /* PC0-PC7 for LCD D0-D7, respectively. */
    GPIOC->MODER &= ~0x0000FFFF;    /* clear pin mode */
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <PORTS_init+0x60>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <PORTS_init+0x60>)
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	041b      	lsls	r3, r3, #16
 8000296:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  0x00005555;    /* set pin output mode */
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <PORTS_init+0x60>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a07      	ldr	r2, [pc, #28]	; (80002bc <PORTS_init+0x60>)
 800029e:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80002a2:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80002a6:	6013      	str	r3, [r2, #0]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020400 	.word	0x40020400
 80002bc:	40020800 	.word	0x40020800

080002c0 <LCD_command>:

void LCD_command(unsigned char command)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = (RS | RW) << 16;  /* RS = 0, R/W = 0 */
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <LCD_command+0x48>)
 80002cc:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80002d0:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = command;           /* put command on data bus */
 80002d2:	4a0e      	ldr	r2, [pc, #56]	; (800030c <LCD_command+0x4c>)
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	6153      	str	r3, [r2, #20]
    GPIOB->BSRR = EN;               /* pulse E high */
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <LCD_command+0x48>)
 80002da:	2280      	movs	r2, #128	; 0x80
 80002dc:	619a      	str	r2, [r3, #24]
    delayMs(0);
 80002de:	2000      	movs	r0, #0
 80002e0:	f000 f83a 	bl	8000358 <delayMs>
    GPIOB->BSRR = EN << 16;         /* clear E */
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LCD_command+0x48>)
 80002e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80002ea:	619a      	str	r2, [r3, #24]

    if (command < 4)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d803      	bhi.n	80002fa <LCD_command+0x3a>
        delayMs(2);         /* command 1 and 2 needs up to 1.64ms */
 80002f2:	2002      	movs	r0, #2
 80002f4:	f000 f830 	bl	8000358 <delayMs>
    else
        delayMs(1);         /* all others 40 us */
}
 80002f8:	e002      	b.n	8000300 <LCD_command+0x40>
        delayMs(1);         /* all others 40 us */
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 f82c 	bl	8000358 <delayMs>
}
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40020400 	.word	0x40020400
 800030c:	40020800 	.word	0x40020800

08000310 <LCD_data>:

void LCD_data(char data)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = RS;               /* RS = 1 */
 800031a:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <LCD_data+0x40>)
 800031c:	2220      	movs	r2, #32
 800031e:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = RW << 16;         /* R/W = 0 */
 8000320:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <LCD_data+0x40>)
 8000322:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000326:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = data;              /* put data on data bus */
 8000328:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LCD_data+0x44>)
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	6153      	str	r3, [r2, #20]
    GPIOB->BSRR = EN;               /* pulse E high */
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <LCD_data+0x40>)
 8000330:	2280      	movs	r2, #128	; 0x80
 8000332:	619a      	str	r2, [r3, #24]
    delayMs(0);
 8000334:	2000      	movs	r0, #0
 8000336:	f000 f80f 	bl	8000358 <delayMs>
    GPIOB->BSRR = EN << 16;         /* clear E */
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <LCD_data+0x40>)
 800033c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000340:	619a      	str	r2, [r3, #24]

    delayMs(1);
 8000342:	2001      	movs	r0, #1
 8000344:	f000 f808 	bl	8000358 <delayMs>
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40020400 	.word	0x40020400
 8000354:	40020800 	.word	0x40020800

08000358 <delayMs>:

/* delay n milliseconds (16 MHz CPU clock) */
void delayMs(int n)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 8000360:	e00d      	b.n	800037e <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	e002      	b.n	800036e <delayMs+0x16>
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	3301      	adds	r3, #1
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000374:	4293      	cmp	r3, r2
 8000376:	ddf7      	ble.n	8000368 <delayMs+0x10>
    for (; n > 0; n--)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b00      	cmp	r3, #0
 8000382:	dcee      	bgt.n	8000362 <delayMs+0xa>
}
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000396:	e7fe      	b.n	8000396 <NMI_Handler+0x4>

08000398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800039c:	e7fe      	b.n	800039c <HardFault_Handler+0x4>

0800039e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <MemManage_Handler+0x4>

080003a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <BusFault_Handler+0x4>

080003aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <UsageFault_Handler+0x4>

080003b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003de:	f000 f83f 	bl	8000460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SystemInit+0x20>)
 80003ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003f2:	4a05      	ldr	r2, [pc, #20]	; (8000408 <SystemInit+0x20>)
 80003f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	e000ed00 	.word	0xe000ed00

0800040c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800040c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000412:	490e      	ldr	r1, [pc, #56]	; (800044c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000414:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000428:	4c0b      	ldr	r4, [pc, #44]	; (8000458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000436:	f7ff ffd7 	bl	80003e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800043a:	f000 f825 	bl	8000488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800043e:	f7ff fec9 	bl	80001d4 <main>
  bx  lr    
 8000442:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000444:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800044c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000450:	080004f0 	.word	0x080004f0
  ldr r2, =_sbss
 8000454:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000458:	20000024 	.word	0x20000024

0800045c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800045c:	e7fe      	b.n	800045c <ADC_IRQHandler>
	...

08000460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_IncTick+0x20>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	461a      	mov	r2, r3
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <HAL_IncTick+0x24>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4413      	add	r3, r2
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_IncTick+0x24>)
 8000472:	6013      	str	r3, [r2, #0]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	20000000 	.word	0x20000000
 8000484:	20000020 	.word	0x20000020

08000488 <__libc_init_array>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	4d0d      	ldr	r5, [pc, #52]	; (80004c0 <__libc_init_array+0x38>)
 800048c:	4c0d      	ldr	r4, [pc, #52]	; (80004c4 <__libc_init_array+0x3c>)
 800048e:	1b64      	subs	r4, r4, r5
 8000490:	10a4      	asrs	r4, r4, #2
 8000492:	2600      	movs	r6, #0
 8000494:	42a6      	cmp	r6, r4
 8000496:	d109      	bne.n	80004ac <__libc_init_array+0x24>
 8000498:	4d0b      	ldr	r5, [pc, #44]	; (80004c8 <__libc_init_array+0x40>)
 800049a:	4c0c      	ldr	r4, [pc, #48]	; (80004cc <__libc_init_array+0x44>)
 800049c:	f000 f818 	bl	80004d0 <_init>
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	10a4      	asrs	r4, r4, #2
 80004a4:	2600      	movs	r6, #0
 80004a6:	42a6      	cmp	r6, r4
 80004a8:	d105      	bne.n	80004b6 <__libc_init_array+0x2e>
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b0:	4798      	blx	r3
 80004b2:	3601      	adds	r6, #1
 80004b4:	e7ee      	b.n	8000494 <__libc_init_array+0xc>
 80004b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ba:	4798      	blx	r3
 80004bc:	3601      	adds	r6, #1
 80004be:	e7f2      	b.n	80004a6 <__libc_init_array+0x1e>
 80004c0:	080004e8 	.word	0x080004e8
 80004c4:	080004e8 	.word	0x080004e8
 80004c8:	080004e8 	.word	0x080004e8
 80004cc:	080004ec 	.word	0x080004ec

080004d0 <_init>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr

080004dc <_fini>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr
